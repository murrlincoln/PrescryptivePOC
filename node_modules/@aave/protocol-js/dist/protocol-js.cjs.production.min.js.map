{"version":3,"file":"protocol-js.cjs.production.min.js","sources":["../src/helpers/bignumber.ts","../src/v1/types.ts","../src/helpers/ray-math.ts","../src/helpers/constants.ts","../src/helpers/pool-math.ts","../src/v1/computations-and-formatting.ts","../src/v2/computations-and-formatting.ts","../src/tx-builder/types/index.ts","../node_modules/regenerator-runtime/runtime.js","../src/tx-builder/config/v2/addresses.ts","../src/tx-builder/config/index.ts","../src/tx-builder/contract-types/factories/IAaveGovernanceV2__factory.ts","../src/tx-builder/contract-types/factories/IAaveIncentivesController__factory.ts","../src/tx-builder/contract-types/factories/IAaveStakingHelper__factory.ts","../src/tx-builder/contract-types/factories/IDebtTokenBase__factory.ts","../src/tx-builder/contract-types/factories/IERC20Detailed__factory.ts","../src/tx-builder/contract-types/factories/IFaucet__factory.ts","../src/tx-builder/contract-types/factories/IGovernancePowerDelegationToken__factory.ts","../src/tx-builder/contract-types/factories/IGovernanceStrategy__factory.ts","../src/tx-builder/contract-types/factories/IGovernanceV2Helper__factory.ts","../src/tx-builder/contract-types/factories/ILendingPool__factory.ts","../src/tx-builder/contract-types/factories/ILendToAaveMigrator__factory.ts","../src/tx-builder/contract-types/factories/IMinter__factory.ts","../src/tx-builder/contract-types/factories/IRepayWithCollateral__factory.ts","../src/tx-builder/contract-types/factories/IStakedToken__factory.ts","../src/tx-builder/contract-types/factories/IParaSwapLiquiditySwapAdapter__factory.ts","../src/tx-builder/contract-types/factories/ISynthetix__factory.ts","../src/tx-builder/contract-types/factories/IWETHGateway__factory.ts","../src/tx-builder/utils/parsings.ts","../src/tx-builder/validators/paramValidators.ts","../src/tx-builder/validators/validations.ts","../src/tx-builder/validators/methodValidators.ts","../src/tx-builder/utils/gasStation.ts","../src/tx-builder/services/BaseService.ts","../src/tx-builder/services/LiquiditySwapAdapterParaswap.ts","../src/tx-builder/services/v2/LendingPool.ts","../src/tx-builder/services/ERC20.ts","../src/tx-builder/services/Faucet.ts","../src/tx-builder/services/LTAMigrator.ts","../src/tx-builder/services/Staking.ts","../src/tx-builder/services/SynthetixService.ts","../src/tx-builder/services/IncentivesController.ts","../src/tx-builder/txBuilder.ts","../src/tx-builder/services/WETHGateway.ts","../src/tx-builder/types/GovernanceV2MethodTypes.ts","../src/tx-builder/types/GovernanceV2ReturnTypes.ts","../src/tx-builder/services/BaseDebtToken.ts","../src/tx-builder/services/RepayWithCollateralAdapter.ts","../src/tx-builder/utils/ipfs.ts","../src/tx-builder/services/v2/AaveGovernanceV2.ts","../src/tx-builder/services/v2/GovernanceDelegationTokenService.ts","../src/tx-builder/v2.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\n\nexport type BigNumberValue = string | number | BigNumber;\n\nexport const BigNumberZD = BigNumber.clone({\n  DECIMAL_PLACES: 0,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n});\n\nexport function valueToBigNumber(amount: BigNumberValue): BigNumber {\n  return new BigNumber(amount);\n}\n\nexport function valueToZDBigNumber(amount: BigNumberValue): BigNumber {\n  return new BigNumberZD(amount);\n}\n\nconst bn10 = new BigNumber(10);\n\nconst bn10PowLookup: { [key: number]: BigNumber } = {};\n\n/**\n * It's a performance optimized version of 10 ** x, which essentially memoizes previously used pows and resolves them as lookup.\n * @param decimals\n * @returns 10 ** decimals\n */\nexport function pow10(decimals: number): BigNumber {\n  if (!bn10PowLookup[decimals]) bn10PowLookup[decimals] = bn10.pow(decimals);\n  return bn10PowLookup[decimals];\n}\n\nexport function normalize(n: BigNumberValue, decimals: number): string {\n  return normalizeBN(n, decimals).toString(10);\n}\n\nexport function normalizeBN(n: BigNumberValue, decimals: number): BigNumber {\n  return valueToBigNumber(n).dividedBy(pow10(decimals));\n}\n","export enum BorrowRateMode {\n  None = 'None',\n  Stable = 'Stable',\n  Variable = 'Variable',\n}\n\nexport type ReserveRatesData = {\n  id: string;\n  symbol: string;\n  paramsHistory: {\n    variableBorrowIndex: string;\n    liquidityIndex: string;\n    timestamp: number;\n  }[];\n};\n\nexport type ReserveData = {\n  id: string;\n  underlyingAsset: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  isActive: boolean;\n  isFreezed: boolean;\n  usageAsCollateralEnabled: boolean;\n  borrowingEnabled: boolean;\n  stableBorrowRateEnabled: boolean;\n  baseLTVasCollateral: string;\n  optimalUtilisationRate: string;\n  stableRateSlope1: string;\n  stableRateSlope2: string;\n  averageStableBorrowRate: string;\n  baseVariableBorrowRate: string;\n  variableRateSlope1: string;\n  variableRateSlope2: string;\n  liquidityIndex: string;\n  reserveLiquidationThreshold: string;\n  reserveLiquidationBonus: string;\n  variableBorrowIndex: string;\n  variableBorrowRate: string;\n  avg30DaysVariableBorrowRate?: string;\n  availableLiquidity: string;\n  stableBorrowRate: string;\n  liquidityRate: string;\n  avg30DaysLiquidityRate?: string;\n  totalBorrows: string;\n  totalBorrowsStable: string;\n  totalBorrowsVariable: string;\n  totalLiquidity: string;\n  utilizationRate: string;\n  lastUpdateTimestamp: number;\n  aToken: {\n    id: string;\n  };\n  price: {\n    priceInEth: string;\n  };\n};\n\nexport type UserReserveData = {\n  principalATokenBalance: string;\n  userBalanceIndex: string;\n  redirectedBalance: string;\n  interestRedirectionAddress: string;\n  usageAsCollateralEnabledOnUser: boolean;\n  borrowRate: string;\n  borrowRateMode: BorrowRateMode;\n  originationFee: string;\n  principalBorrows: string;\n  variableBorrowIndex: string;\n  lastUpdateTimestamp: number;\n  reserve: {\n    id: string;\n    underlyingAsset: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n    liquidityRate: string;\n    reserveLiquidationBonus: string;\n    lastUpdateTimestamp: number;\n    aToken: {\n      id: string;\n    };\n  };\n};\n\nexport type ComputedUserReserve = UserReserveData & {\n  currentUnderlyingBalance: string;\n  currentUnderlyingBalanceETH: string;\n  currentUnderlyingBalanceUSD: string;\n\n  currentBorrows: string;\n  currentBorrowsETH: string;\n  currentBorrowsUSD: string;\n\n  principalBorrowsETH: string;\n  principalBorrowsUSD: string;\n\n  originationFeeETH: string;\n  originationFeeUSD: string;\n};\n\nexport type UserSummaryData = {\n  id: string;\n  totalLiquidityETH: string;\n  totalCollateralETH: string;\n  totalBorrowsETH: string;\n  totalFeesETH: string;\n  totalFeesUSD: string;\n  totalLiquidityUSD: string;\n  totalCollateralUSD: string;\n  totalBorrowsUSD: string;\n  totalBorrowsWithFeesETH: string;\n  totalBorrowsWithFeesUSD: string;\n  availableBorrowsETH: string;\n  currentLoanToValue: string;\n  currentLiquidationThreshold: string;\n  maxAmountToWithdrawInEth: string;\n  healthFactor: string;\n  reservesData: ComputedUserReserve[];\n};\n","import BigNumber from 'bignumber.js';\nimport { BigNumberValue, valueToZDBigNumber } from './bignumber';\n\nexport const WAD = valueToZDBigNumber(10).pow(18);\nexport const HALF_WAD = WAD.dividedBy(2);\n\nexport const RAY = valueToZDBigNumber(10).pow(27);\nexport const HALF_RAY = RAY.dividedBy(2);\n\nexport const WAD_RAY_RATIO = valueToZDBigNumber(10).pow(9);\n\nexport function wadMul(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  return HALF_WAD.plus(valueToZDBigNumber(a).multipliedBy(b)).div(WAD);\n}\n\nexport function wadDiv(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  const halfB = valueToZDBigNumber(b).div(2);\n\n  return halfB.plus(valueToZDBigNumber(a).multipliedBy(WAD)).div(b);\n}\n\nexport function rayMul(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  return HALF_RAY.plus(valueToZDBigNumber(a).multipliedBy(b)).div(RAY);\n}\n\nexport function rayDiv(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  const halfB = valueToZDBigNumber(b).div(2);\n\n  return halfB.plus(valueToZDBigNumber(a).multipliedBy(RAY)).div(b);\n}\n\nexport function rayToWad(a: BigNumberValue): BigNumber {\n  const halfRatio = valueToZDBigNumber(WAD_RAY_RATIO).div(2);\n\n  return halfRatio.plus(a).div(WAD_RAY_RATIO);\n}\n\nexport function wadToRay(a: BigNumberValue): BigNumber {\n  return valueToZDBigNumber(a).multipliedBy(WAD_RAY_RATIO).decimalPlaces(0);\n}\n\nexport function rayPow(a: BigNumberValue, p: BigNumberValue): BigNumber {\n  let x = valueToZDBigNumber(a);\n  let n = valueToZDBigNumber(p);\n  let z = !n.modulo(2).eq(0) ? x : valueToZDBigNumber(RAY);\n\n  for (n = n.div(2); !n.eq(0); n = n.div(2)) {\n    x = rayMul(x, x);\n\n    if (!n.modulo(2).eq(0)) {\n      z = rayMul(z, x);\n    }\n  }\n  return z;\n}\n\n/**\n * RayPow is slow and gas intensive therefore in v2 we switched to binomial approximation on the contract level.\n * While the results ar not exact to the last decimal, they are close enough.\n */\nexport function binomialApproximatedRayPow(\n  a: BigNumberValue,\n  p: BigNumberValue\n): BigNumber {\n  const base = valueToZDBigNumber(a);\n  const exp = valueToZDBigNumber(p);\n  if (exp.eq(0)) return RAY;\n  const expMinusOne = exp.minus(1);\n  const expMinusTwo = exp.gt(2) ? exp.minus(2) : 0;\n\n  const basePowerTwo = rayMul(base, base);\n  const basePowerThree = rayMul(basePowerTwo, base);\n\n  const firstTerm = exp.multipliedBy(base);\n  const secondTerm = exp\n    .multipliedBy(expMinusOne)\n    .multipliedBy(basePowerTwo)\n    .div(2);\n  const thirdTerm = exp\n    .multipliedBy(expMinusOne)\n    .multipliedBy(expMinusTwo)\n    .multipliedBy(basePowerThree)\n    .div(6);\n\n  return RAY.plus(firstTerm).plus(secondTerm).plus(thirdTerm);\n}\n\nexport function rayToDecimal(a: BigNumberValue): BigNumber {\n  return valueToZDBigNumber(a).dividedBy(RAY);\n}\n","import { valueToBigNumber } from './bignumber';\n\nexport const SECONDS_PER_YEAR = valueToBigNumber('31536000');\nexport const ETH_DECIMALS = 18;\nexport const USD_DECIMALS = 10;\nexport const RAY_DECIMALS = 27;\n","import BigNumber from 'bignumber.js';\n\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  pow10,\n} from './bignumber';\nimport * as RayMath from './ray-math';\nimport { SECONDS_PER_YEAR } from './constants';\n\nexport const LTV_PRECISION = 4;\n\nexport function calculateCompoundedInterest(\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n): BigNumber {\n  const timeDelta = valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp);\n  const ratePerSecond = valueToZDBigNumber(rate).dividedBy(SECONDS_PER_YEAR);\n  return RayMath.binomialApproximatedRayPow(ratePerSecond, timeDelta);\n}\n\nexport function getCompoundedBalance(\n  _principalBalance: BigNumberValue,\n  _reserveIndex: BigNumberValue,\n  _reserveRate: BigNumberValue,\n  _lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  const principalBalance = valueToZDBigNumber(_principalBalance);\n  if (principalBalance.eq('0')) {\n    return principalBalance;\n  }\n\n  const compoundedInterest = calculateCompoundedInterest(\n    _reserveRate,\n    currentTimestamp,\n    _lastUpdateTimestamp\n  );\n  const cumulatedInterest = RayMath.rayMul(compoundedInterest, _reserveIndex);\n  const principalBalanceRay = RayMath.wadToRay(principalBalance);\n\n  return RayMath.rayToWad(\n    RayMath.rayMul(principalBalanceRay, cumulatedInterest)\n  );\n}\n\nexport const calculateLinearInterest = (\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n) => {\n  const timeDelta = RayMath.wadToRay(\n    valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp)\n  );\n  const timeDeltaInSeconds = RayMath.rayDiv(\n    timeDelta,\n    RayMath.wadToRay(SECONDS_PER_YEAR)\n  );\n  return RayMath.rayMul(rate, timeDeltaInSeconds).plus(RayMath.RAY);\n};\n\nexport function getReserveNormalizedIncome(\n  rate: BigNumberValue,\n  index: BigNumberValue,\n  lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  if (valueToZDBigNumber(rate).eq('0')) {\n    return valueToZDBigNumber(index);\n  }\n\n  const cumulatedInterest = calculateLinearInterest(\n    rate,\n    currentTimestamp,\n    lastUpdateTimestamp\n  );\n\n  return RayMath.rayMul(cumulatedInterest, index);\n}\n\nexport function getLinearBalance(\n  balance: BigNumberValue,\n  index: BigNumberValue,\n  rate: BigNumberValue,\n  lastUpdateTimestamp: number,\n  currentTimestamp: number\n) {\n  return RayMath.rayToWad(\n    RayMath.rayMul(\n      RayMath.wadToRay(balance),\n      getReserveNormalizedIncome(\n        rate,\n        index,\n        lastUpdateTimestamp,\n        currentTimestamp\n      )\n    )\n  );\n}\n\nexport function getCompoundedStableBalance(\n  _principalBalance: BigNumberValue,\n  _userStableRate: BigNumberValue,\n  _lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  const principalBalance = valueToZDBigNumber(_principalBalance);\n  if (principalBalance.eq('0')) {\n    return principalBalance;\n  }\n\n  const cumulatedInterest = calculateCompoundedInterest(\n    _userStableRate,\n    currentTimestamp,\n    _lastUpdateTimestamp\n  );\n  const principalBalanceRay = RayMath.wadToRay(principalBalance);\n\n  return RayMath.rayToWad(\n    RayMath.rayMul(principalBalanceRay, cumulatedInterest)\n  );\n}\n\nexport function calculateHealthFactorFromBalances(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  if (valueToBigNumber(borrowBalanceETH).eq(0)) {\n    return valueToBigNumber('-1'); // invalid number\n  }\n  return valueToBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLiquidationThreshold)\n    .dividedBy(pow10(LTV_PRECISION))\n    .div(borrowBalanceETH);\n}\n\nexport function calculateHealthFactorFromBalancesBigUnits(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  return calculateHealthFactorFromBalances(\n    collateralBalanceETH,\n    borrowBalanceETH,\n    new BigNumber(currentLiquidationThreshold)\n      .multipliedBy(pow10(LTV_PRECISION))\n      .decimalPlaces(0, BigNumber.ROUND_DOWN)\n  );\n}\n\nexport function calculateAvailableBorrowsETH(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLtv: BigNumberValue\n): BigNumber {\n  if (valueToZDBigNumber(currentLtv).eq(0)) {\n    return valueToZDBigNumber('0');\n  }\n  const availableBorrowsETH = valueToZDBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLtv)\n    .dividedBy(pow10(LTV_PRECISION))\n    .minus(borrowBalanceETH);\n  return availableBorrowsETH.gt('0')\n    ? availableBorrowsETH\n    : valueToZDBigNumber('0');\n}\n\nexport function calculateAverageRate(\n  index0: string,\n  index1: string,\n  timestamp0: number,\n  timestamp1: number\n): string {\n  return valueToBigNumber(index1)\n    .dividedBy(index0)\n    .minus('1')\n    .dividedBy(timestamp1 - timestamp0)\n    .multipliedBy(SECONDS_PER_YEAR)\n    .toString();\n}\n","import BigNumber from 'bignumber.js';\nimport * as RayMath from '../helpers/ray-math';\nimport {\n  ReserveData,\n  ComputedUserReserve,\n  UserReserveData,\n  UserSummaryData,\n  BorrowRateMode,\n  ReserveRatesData,\n} from './types';\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  normalize,\n  pow10,\n} from '../helpers/bignumber';\nimport {\n  ETH_DECIMALS,\n  RAY_DECIMALS,\n  SECONDS_PER_YEAR,\n  USD_DECIMALS,\n} from '../helpers/constants';\nimport {\n  calculateAverageRate,\n  getReserveNormalizedIncome,\n} from '../helpers/pool-math';\n\nexport type GetCompoundedBorrowBalanceParamsReserve = Pick<\n  ReserveData,\n  'variableBorrowRate' | 'lastUpdateTimestamp' | 'variableBorrowIndex'\n>;\nexport type GetCompoundedBorrowBalanceParamsUserReserve = Pick<\n  UserReserveData,\n  | 'principalBorrows'\n  | 'borrowRateMode'\n  | 'variableBorrowIndex'\n  | 'borrowRate'\n  | 'lastUpdateTimestamp'\n>;\n\nexport function getCompoundedBorrowBalance(\n  reserve: GetCompoundedBorrowBalanceParamsReserve,\n  userReserve: GetCompoundedBorrowBalanceParamsUserReserve,\n  currentTimestamp: number\n): BigNumber {\n  const principalBorrows = valueToZDBigNumber(userReserve.principalBorrows);\n  if (principalBorrows.eq('0')) {\n    return valueToZDBigNumber('0');\n  }\n\n  let cumulatedInterest;\n  if (userReserve.borrowRateMode === BorrowRateMode.Variable) {\n    const compoundedInterest = calculateCompoundedInterest(\n      reserve.variableBorrowRate,\n      currentTimestamp,\n      reserve.lastUpdateTimestamp\n    );\n\n    cumulatedInterest = RayMath.rayDiv(\n      RayMath.rayMul(compoundedInterest, reserve.variableBorrowIndex),\n      userReserve.variableBorrowIndex\n    );\n  } else {\n    // if stable\n    cumulatedInterest = calculateCompoundedInterest(\n      userReserve.borrowRate,\n      currentTimestamp,\n      userReserve.lastUpdateTimestamp\n    );\n  }\n\n  const borrowBalanceRay = RayMath.wadToRay(principalBorrows);\n\n  return RayMath.rayToWad(RayMath.rayMul(borrowBalanceRay, cumulatedInterest));\n}\n\nexport const calculateCompoundedInterest = (\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n): BigNumber => {\n  const timeDelta = valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp);\n  const ratePerSecond = valueToZDBigNumber(rate).dividedBy(SECONDS_PER_YEAR);\n  return RayMath.binomialApproximatedRayPow(ratePerSecond, timeDelta);\n};\n\nexport function calculateHealthFactorFromBalances(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  if (valueToBigNumber(borrowBalanceETH).eq(0)) {\n    return valueToBigNumber('-1'); // invalid number\n  }\n  return valueToBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLiquidationThreshold)\n    .dividedBy(100)\n    .div(valueToBigNumber(borrowBalanceETH).plus(totalFeesETH));\n}\n\nexport function calculateHealthFactorFromBalancesBigUnits(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  return calculateHealthFactorFromBalances(\n    collateralBalanceETH,\n    borrowBalanceETH,\n    totalFeesETH,\n    new BigNumber(currentLiquidationThreshold)\n      .multipliedBy(100)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN)\n  );\n}\n\nexport function calculateAvailableBorrowsETH(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLtv: BigNumberValue\n): BigNumber {\n  if (valueToZDBigNumber(currentLtv).eq(0)) {\n    return valueToZDBigNumber('0');\n  }\n  let availableBorrowsETH = valueToZDBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLtv)\n    .dividedBy(100);\n  if (availableBorrowsETH.lt(borrowBalanceETH)) {\n    return valueToZDBigNumber('0');\n  }\n  availableBorrowsETH = availableBorrowsETH\n    .minus(borrowBalanceETH)\n    .minus(totalFeesETH);\n  const borrowFee = availableBorrowsETH.multipliedBy('0.0025');\n  return availableBorrowsETH.minus(borrowFee);\n}\n\nexport type CalculateCumulatedBalancePoolReserve = {\n  liquidityRate: BigNumberValue;\n  liquidityIndex: BigNumberValue;\n  lastUpdateTimestamp: number;\n};\nexport type CalculateCumulatedBalanceUserReserve = Pick<\n  UserReserveData,\n  'userBalanceIndex'\n>;\n\nexport function calculateCumulatedBalance(\n  balance: BigNumberValue,\n  userReserve: CalculateCumulatedBalanceUserReserve,\n  poolReserve: CalculateCumulatedBalancePoolReserve,\n  currentTimestamp: number\n): BigNumber {\n  return RayMath.rayToWad(\n    RayMath.rayDiv(\n      RayMath.rayMul(\n        RayMath.wadToRay(balance),\n        getReserveNormalizedIncome(\n          poolReserve.liquidityRate,\n          poolReserve.liquidityIndex,\n          poolReserve.lastUpdateTimestamp,\n          currentTimestamp\n        )\n      ),\n      userReserve.userBalanceIndex\n    )\n  );\n}\n\nexport type CalculateCurrentUnderlyingBalancePoolReserve = CalculateCumulatedBalancePoolReserve;\nexport type CalculateCurrentUnderlyingBalanceUserReserve = CalculateCumulatedBalanceUserReserve &\n  Pick<\n    UserReserveData,\n    | 'principalATokenBalance'\n    | 'redirectedBalance'\n    | 'interestRedirectionAddress'\n  >;\n\nexport function calculateCurrentUnderlyingBalance(\n  userReserve: CalculateCurrentUnderlyingBalanceUserReserve,\n  poolReserve: CalculateCurrentUnderlyingBalancePoolReserve,\n  currentTimestamp: number\n): BigNumber {\n  if (\n    userReserve.principalATokenBalance === '0' &&\n    userReserve.redirectedBalance === '0'\n  ) {\n    return valueToZDBigNumber('0');\n  }\n  if (\n    userReserve.interestRedirectionAddress !==\n    '0x0000000000000000000000000000000000000000'\n  ) {\n    return valueToZDBigNumber(userReserve.principalATokenBalance).plus(\n      calculateCumulatedBalance(\n        userReserve.redirectedBalance,\n        userReserve,\n        poolReserve,\n        currentTimestamp\n      ).minus(userReserve.redirectedBalance)\n    );\n  }\n  return calculateCumulatedBalance(\n    valueToBigNumber(userReserve.redirectedBalance)\n      .plus(userReserve.principalATokenBalance)\n      .toString(),\n    userReserve,\n    poolReserve,\n    currentTimestamp\n  ).minus(userReserve.redirectedBalance);\n}\n\nfunction computeUserReserveData(\n  poolReserve: ReserveData,\n  userReserve: UserReserveData,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): ComputedUserReserve {\n  const {\n    price: { priceInEth },\n    decimals,\n  } = poolReserve;\n  const currentUnderlyingBalance = calculateCurrentUnderlyingBalance(\n    userReserve,\n    poolReserve,\n    currentTimestamp\n  );\n  const currentUnderlyingBalanceETH = currentUnderlyingBalance\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const currentUnderlyingBalanceUSD = currentUnderlyingBalanceETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const principalBorrowsETH = valueToZDBigNumber(userReserve.principalBorrows)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const principalBorrowsUSD = principalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const currentBorrows = getCompoundedBorrowBalance(\n    poolReserve,\n    userReserve,\n    currentTimestamp\n  );\n  const currentBorrowsETH = currentBorrows\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const currentBorrowsUSD = currentBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const originationFeeETH = valueToZDBigNumber(userReserve.originationFee)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const originationFeeUSD = originationFeeETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  return {\n    ...userReserve,\n    principalBorrowsUSD,\n    currentBorrowsUSD,\n    originationFeeUSD,\n    currentUnderlyingBalanceUSD,\n    originationFeeETH: originationFeeETH.toString(),\n    currentBorrows: currentBorrows.toString(),\n    currentBorrowsETH: currentBorrowsETH.toString(),\n    principalBorrowsETH: principalBorrowsETH.toString(),\n    currentUnderlyingBalance: currentUnderlyingBalance.toFixed(),\n    currentUnderlyingBalanceETH: currentUnderlyingBalanceETH.toFixed(),\n  };\n}\n\nexport function computeRawUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  let totalLiquidityETH = valueToZDBigNumber('0');\n  let totalCollateralETH = valueToZDBigNumber('0');\n  let totalBorrowsETH = valueToZDBigNumber('0');\n  let totalFeesETH = valueToZDBigNumber('0');\n  let currentLtv = valueToBigNumber('0');\n  let currentLiquidationThreshold = valueToBigNumber('0');\n\n  const userReservesData = rawUserReserves\n    .map((userReserve) => {\n      const poolReserve = poolReservesData.find(\n        (reserve) => reserve.id === userReserve.reserve.id\n      );\n      if (!poolReserve) {\n        throw new Error(\n          'Reserve is not registered on platform, please contact support'\n        );\n      }\n      const computedUserReserve = computeUserReserveData(\n        poolReserve,\n        userReserve,\n        usdPriceEth,\n        currentTimestamp\n      );\n      totalLiquidityETH = totalLiquidityETH.plus(\n        computedUserReserve.currentUnderlyingBalanceETH\n      );\n      totalBorrowsETH = totalBorrowsETH.plus(\n        computedUserReserve.currentBorrowsETH\n      );\n      totalFeesETH = totalFeesETH.plus(computedUserReserve.originationFeeETH);\n\n      // asset enabled as collateral\n      if (\n        poolReserve.usageAsCollateralEnabled &&\n        userReserve.usageAsCollateralEnabledOnUser\n      ) {\n        totalCollateralETH = totalCollateralETH.plus(\n          computedUserReserve.currentUnderlyingBalanceETH\n        );\n        currentLtv = currentLtv.plus(\n          valueToBigNumber(\n            computedUserReserve.currentUnderlyingBalanceETH\n          ).multipliedBy(poolReserve.baseLTVasCollateral)\n        );\n        currentLiquidationThreshold = currentLiquidationThreshold.plus(\n          valueToBigNumber(\n            computedUserReserve.currentUnderlyingBalanceETH\n          ).multipliedBy(poolReserve.reserveLiquidationThreshold)\n        );\n      }\n      return computedUserReserve;\n    })\n    .sort((a, b) =>\n      a.reserve.symbol > b.reserve.symbol\n        ? 1\n        : a.reserve.symbol < b.reserve.symbol\n        ? -1\n        : 0\n    );\n\n  if (currentLtv.gt(0)) {\n    currentLtv = currentLtv\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n  if (currentLiquidationThreshold.gt(0)) {\n    currentLiquidationThreshold = currentLiquidationThreshold\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n\n  const healthFactor = calculateHealthFactorFromBalances(\n    totalCollateralETH,\n    totalBorrowsETH,\n    totalFeesETH,\n    currentLiquidationThreshold\n  );\n\n  const totalCollateralUSD = totalCollateralETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalLiquidityUSD = totalLiquidityETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalBorrowsUSD = totalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalFeesUSD = totalFeesETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth);\n\n  const totalBorrowsWithFeesETH = totalFeesETH.plus(totalBorrowsETH);\n  const totalBorrowsWithFeesUSD = totalFeesUSD.plus(totalBorrowsUSD);\n  const availableBorrowsETH = calculateAvailableBorrowsETH(\n    totalCollateralETH,\n    totalBorrowsETH,\n    totalFeesETH,\n    currentLtv\n  );\n\n  const totalBorrowsAndFeesETH = totalBorrowsETH.plus(totalFeesETH);\n  const maxAmountToWithdrawInEth = totalLiquidityETH.minus(\n    totalBorrowsAndFeesETH.eq(0)\n      ? '0'\n      : totalBorrowsAndFeesETH\n          .multipliedBy(100)\n          .dividedBy(currentLiquidationThreshold)\n  );\n\n  return {\n    totalLiquidityUSD,\n    totalCollateralUSD,\n    totalBorrowsUSD,\n    id: userId,\n    totalLiquidityETH: totalLiquidityETH.toString(),\n    totalCollateralETH: totalCollateralETH.toString(),\n    totalFeesETH: totalFeesETH.toString(),\n    totalBorrowsETH: totalBorrowsETH.toString(),\n    availableBorrowsETH: availableBorrowsETH.toString(),\n    currentLoanToValue: currentLtv.toString(),\n    currentLiquidationThreshold: currentLiquidationThreshold.toString(),\n    maxAmountToWithdrawInEth: maxAmountToWithdrawInEth.toString(),\n    healthFactor: healthFactor.toString(),\n    reservesData: userReservesData,\n    totalFeesUSD: totalFeesUSD.toString(),\n    totalBorrowsWithFeesETH: totalBorrowsWithFeesETH.toString(),\n    totalBorrowsWithFeesUSD: totalBorrowsWithFeesUSD.toString(),\n  };\n}\n\nexport function formatUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  const userData = computeRawUserSummaryData(\n    poolReservesData,\n    rawUserReserves,\n    userId,\n    usdPriceEth,\n    currentTimestamp\n  );\n  const userReservesData = userData.reservesData.map(\n    ({ reserve, ...userReserve }): ComputedUserReserve => {\n      const reserveDecimals = reserve.decimals;\n      return {\n        ...userReserve,\n        reserve: {\n          ...reserve,\n          reserveLiquidationBonus: normalize(\n            valueToBigNumber(reserve.reserveLiquidationBonus).minus(100),\n            2\n          ),\n          liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n        },\n        redirectedBalance: normalize(\n          userReserve.redirectedBalance,\n          reserveDecimals\n        ),\n        principalATokenBalance: normalize(\n          userReserve.principalATokenBalance,\n          reserveDecimals\n        ),\n        borrowRate: normalize(userReserve.borrowRate, RAY_DECIMALS),\n        lastUpdateTimestamp: userReserve.lastUpdateTimestamp,\n        variableBorrowIndex: normalize(\n          userReserve.variableBorrowIndex,\n          RAY_DECIMALS\n        ),\n        userBalanceIndex: normalize(userReserve.userBalanceIndex, RAY_DECIMALS),\n        currentUnderlyingBalance: normalize(\n          userReserve.currentUnderlyingBalance,\n          reserveDecimals\n        ),\n        currentUnderlyingBalanceETH: normalize(\n          userReserve.currentUnderlyingBalanceETH,\n          ETH_DECIMALS\n        ),\n        currentUnderlyingBalanceUSD: normalize(\n          userReserve.currentUnderlyingBalanceUSD,\n          USD_DECIMALS\n        ),\n        principalBorrows: normalize(\n          userReserve.principalBorrows,\n          reserveDecimals\n        ),\n        principalBorrowsETH: normalize(\n          userReserve.principalBorrowsETH,\n          ETH_DECIMALS\n        ),\n        principalBorrowsUSD: normalize(\n          userReserve.principalBorrowsUSD,\n          USD_DECIMALS\n        ),\n        currentBorrows: normalize(userReserve.currentBorrows, reserveDecimals),\n        currentBorrowsETH: normalize(\n          userReserve.currentBorrowsETH,\n          ETH_DECIMALS\n        ),\n        currentBorrowsUSD: normalize(\n          userReserve.currentBorrowsUSD,\n          USD_DECIMALS\n        ),\n        originationFee: normalize(userReserve.originationFee, reserveDecimals),\n        originationFeeETH: normalize(\n          userReserve.originationFeeETH,\n          ETH_DECIMALS\n        ),\n        originationFeeUSD: normalize(\n          userReserve.originationFeeUSD,\n          USD_DECIMALS\n        ),\n      };\n    }\n  );\n  return {\n    id: userData.id,\n    reservesData: userReservesData,\n    totalLiquidityETH: normalize(userData.totalLiquidityETH, ETH_DECIMALS),\n    totalLiquidityUSD: normalize(userData.totalLiquidityUSD, USD_DECIMALS),\n    totalCollateralETH: normalize(userData.totalCollateralETH, ETH_DECIMALS),\n    totalCollateralUSD: normalize(userData.totalCollateralUSD, USD_DECIMALS),\n    totalFeesETH: normalize(userData.totalFeesETH, ETH_DECIMALS),\n    totalFeesUSD: normalize(userData.totalFeesUSD, USD_DECIMALS),\n    totalBorrowsETH: normalize(userData.totalBorrowsETH, ETH_DECIMALS),\n    totalBorrowsUSD: normalize(userData.totalBorrowsUSD, USD_DECIMALS),\n    totalBorrowsWithFeesETH: normalize(\n      userData.totalBorrowsWithFeesETH,\n      ETH_DECIMALS\n    ),\n    totalBorrowsWithFeesUSD: normalize(\n      userData.totalBorrowsWithFeesUSD,\n      USD_DECIMALS\n    ),\n    availableBorrowsETH: normalize(userData.availableBorrowsETH, ETH_DECIMALS),\n    currentLoanToValue: normalize(userData.currentLoanToValue, 2),\n    currentLiquidationThreshold: normalize(\n      userData.currentLiquidationThreshold,\n      2\n    ),\n    maxAmountToWithdrawInEth: normalize(\n      userData.maxAmountToWithdrawInEth,\n      ETH_DECIMALS\n    ),\n    healthFactor: userData.healthFactor,\n  };\n}\n\nexport function formatReserves(\n  reserves: ReserveData[],\n  reserveIndexes30DaysAgo?: ReserveRatesData[]\n): ReserveData[] {\n  return reserves.map((reserve) => {\n    const reserve30DaysAgo = reserveIndexes30DaysAgo?.find(\n      (res) => res.id === reserve.id\n    )?.paramsHistory?.[0];\n\n    return {\n      ...reserve,\n      price: {\n        ...reserve.price,\n        priceInEth: normalize(reserve.price.priceInEth, ETH_DECIMALS),\n      },\n      baseLTVasCollateral: normalize(reserve.baseLTVasCollateral, 2),\n      variableBorrowRate: normalize(reserve.variableBorrowRate, RAY_DECIMALS),\n      avg30DaysVariableBorrowRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.variableBorrowIndex,\n            reserve.variableBorrowIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n      avg30DaysLiquidityRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.liquidityIndex,\n            reserve.liquidityIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n\n      stableBorrowRate: normalize(reserve.stableBorrowRate, RAY_DECIMALS),\n      liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n      totalLiquidity: normalize(reserve.totalLiquidity, reserve.decimals),\n      availableLiquidity: normalize(\n        reserve.availableLiquidity,\n        reserve.decimals\n      ),\n      liquidityIndex: normalize(reserve.liquidityIndex, RAY_DECIMALS),\n      reserveLiquidationThreshold: normalize(\n        reserve.reserveLiquidationThreshold,\n        2\n      ),\n      reserveLiquidationBonus: normalize(\n        valueToBigNumber(reserve.reserveLiquidationBonus).minus(100),\n        2\n      ),\n      totalBorrows: normalize(reserve.totalBorrows, reserve.decimals),\n      totalBorrowsVariable: normalize(\n        reserve.totalBorrowsVariable,\n        reserve.decimals\n      ),\n      totalBorrowsStable: normalize(\n        reserve.totalBorrowsStable,\n        reserve.decimals\n      ),\n      variableBorrowIndex: normalize(reserve.variableBorrowIndex, RAY_DECIMALS),\n    };\n  });\n}\n\nexport function calculateInterestRates(\n  reserve: ReserveData,\n  amountToDeposit: BigNumberValue,\n  amountToBorrow: BigNumberValue,\n  borrowMode: 'stable' | 'variable' = 'variable'\n) {\n  const { optimalUtilisationRate } = reserve;\n  const baseVariableBorrowRate = valueToBigNumber(\n    reserve.baseVariableBorrowRate\n  );\n  const totalBorrowsStable = valueToBigNumber(reserve.totalBorrowsStable).plus(\n    borrowMode === 'stable' ? amountToBorrow : '0'\n  );\n  const totalBorrowsVariable = valueToBigNumber(\n    reserve.totalBorrowsVariable\n  ).plus(borrowMode === 'variable' ? amountToBorrow : '0');\n  const totalBorrows = totalBorrowsStable.plus(totalBorrowsVariable);\n  const totalDeposits = valueToBigNumber(reserve.totalLiquidity).plus(\n    amountToDeposit\n  );\n  const utilizationRate =\n    totalDeposits.eq(0) && totalBorrows.eq(0)\n      ? valueToBigNumber(0)\n      : totalBorrows.dividedBy(totalDeposits);\n\n  let currentStableBorrowRate = valueToBigNumber(reserve.stableBorrowRate);\n  let currentVariableBorrowRate = valueToBigNumber(0);\n  let currentLiquidityRate = valueToBigNumber(0);\n\n  if (utilizationRate.gt(optimalUtilisationRate)) {\n    const excessUtilizationRateRatio = utilizationRate\n      .minus(optimalUtilisationRate)\n      .dividedBy(valueToBigNumber(1).minus(optimalUtilisationRate));\n\n    currentStableBorrowRate = currentStableBorrowRate\n      .plus(reserve.stableRateSlope1)\n      .plus(excessUtilizationRateRatio.multipliedBy(reserve.stableRateSlope2));\n    currentVariableBorrowRate = baseVariableBorrowRate\n      .plus(reserve.variableRateSlope1)\n      .plus(\n        excessUtilizationRateRatio.multipliedBy(reserve.variableRateSlope2)\n      );\n  } else {\n    currentStableBorrowRate = currentVariableBorrowRate.plus(\n      utilizationRate\n        .dividedBy(optimalUtilisationRate)\n        .multipliedBy(reserve.stableRateSlope1)\n    );\n    currentVariableBorrowRate = baseVariableBorrowRate.plus(\n      utilizationRate\n        .dividedBy(optimalUtilisationRate)\n        .multipliedBy(reserve.variableRateSlope1)\n    );\n  }\n\n  if (!totalBorrows.eq(0)) {\n    const weightedVariableRate = currentVariableBorrowRate.multipliedBy(\n      totalBorrowsVariable\n    );\n    const weightedStableRate = valueToBigNumber(\n      reserve.averageStableBorrowRate\n    ).multipliedBy(totalBorrowsStable);\n\n    currentLiquidityRate = weightedVariableRate\n      .plus(weightedStableRate)\n      .dividedBy(totalBorrows);\n  }\n\n  return {\n    variableBorrowRate: currentVariableBorrowRate.toString(),\n    stableBorrowRate: currentStableBorrowRate.toString(),\n    liquidityRate: currentLiquidityRate.toString(),\n  };\n}\n","import BigNumber from 'bignumber.js';\n\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  normalize,\n  pow10,\n  normalizeBN,\n} from '../helpers/bignumber';\nimport {\n  calculateAvailableBorrowsETH,\n  calculateHealthFactorFromBalances,\n  getCompoundedBalance,\n  getCompoundedStableBalance,\n  calculateAverageRate,\n  LTV_PRECISION,\n  calculateCompoundedInterest,\n  getLinearBalance,\n} from '../helpers/pool-math';\nimport { rayMul } from '../helpers/ray-math';\nimport {\n  ComputedUserReserve,\n  ReserveData,\n  UserReserveData,\n  UserSummaryData,\n  ReserveRatesData,\n  ComputedReserveData,\n  Supplies,\n  ReserveSupplyData,\n  RewardsInformation,\n} from './types';\nimport {\n  ETH_DECIMALS,\n  RAY_DECIMALS,\n  SECONDS_PER_YEAR,\n  USD_DECIMALS,\n} from '../helpers/constants';\n\nexport function getEthAndUsdBalance(\n  balance: BigNumberValue,\n  priceInEth: BigNumberValue,\n  decimals: number,\n  usdPriceEth: BigNumberValue\n): [string, string] {\n  const balanceInEth = valueToZDBigNumber(balance)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const balanceInUsd = balanceInEth\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n  return [balanceInEth.toString(), balanceInUsd];\n}\n\n/*\ntype ComputeUserReserveDataPoolReserve = Pick<\n  ReserveData,\n  | 'price'\n  | 'decimals'\n  | 'liquidityIndex'\n  | 'liquidityRate'\n  | 'lastUpdateTimestamp'\n  | 'variableBorrowIndex'\n  | 'variableBorrowRate'\n>;\n\ntype ComputeUserReserveDataUserReserve = Pick<\n  UserReserveData,\n  | 'scaledATokenBalance'\n  | 'scaledVariableDebt'\n  | 'principalStableDebt'\n  | 'stableBorrowRate'\n  | 'stableBorrowLastUpdateTimestamp'\n>;\n*/\n\nexport function computeUserReserveData(\n  poolReserve: ReserveData,\n  userReserve: UserReserveData,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number,\n  rewardsInfo: RewardsInformation\n): ComputedUserReserve {\n  const {\n    price: { priceInEth },\n    decimals,\n  } = poolReserve;\n  const underlyingBalance = getLinearBalance(\n    userReserve.scaledATokenBalance,\n    poolReserve.liquidityIndex,\n    poolReserve.liquidityRate,\n    poolReserve.lastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n  const [underlyingBalanceETH, underlyingBalanceUSD] = getEthAndUsdBalance(\n    underlyingBalance,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n\n  const variableBorrows = getCompoundedBalance(\n    userReserve.scaledVariableDebt,\n    poolReserve.variableBorrowIndex,\n    poolReserve.variableBorrowRate,\n    poolReserve.lastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n\n  const [variableBorrowsETH, variableBorrowsUSD] = getEthAndUsdBalance(\n    variableBorrows,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n\n  const stableBorrows = getCompoundedStableBalance(\n    userReserve.principalStableDebt,\n    userReserve.stableBorrowRate,\n    userReserve.stableBorrowLastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n\n  const [stableBorrowsETH, stableBorrowsUSD] = getEthAndUsdBalance(\n    stableBorrows,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n  const {\n    totalLiquidity,\n    totalStableDebt,\n    totalVariableDebt,\n  } = calculateSupplies(\n    {\n      totalScaledVariableDebt: poolReserve.totalScaledVariableDebt,\n      variableBorrowIndex: poolReserve.variableBorrowIndex,\n      variableBorrowRate: poolReserve.variableBorrowRate,\n      totalPrincipalStableDebt: poolReserve.totalPrincipalStableDebt,\n      averageStableRate: poolReserve.averageStableRate,\n      availableLiquidity: poolReserve.availableLiquidity,\n      stableDebtLastUpdateTimestamp: poolReserve.stableDebtLastUpdateTimestamp,\n      lastUpdateTimestamp: poolReserve.lastUpdateTimestamp,\n    },\n    currentTimestamp\n  );\n\n  const aTokenRewards = totalLiquidity.gt(0)\n    ? calculateRewards(\n        underlyingBalance,\n        poolReserve.aTokenIncentivesIndex,\n        userReserve.aTokenincentivesUserIndex,\n        rewardsInfo.incentivePrecision,\n        rewardsInfo.rewardTokenDecimals,\n        poolReserve.aIncentivesLastUpdateTimestamp,\n        poolReserve.aEmissionPerSecond,\n        totalLiquidity,\n        currentTimestamp,\n        rewardsInfo.emissionEndTimestamp\n      )\n    : '0';\n\n  const [aTokenRewardsETH, aTokenRewardsUSD] = getEthAndUsdBalance(\n    aTokenRewards,\n    rewardsInfo.rewardTokenPriceEth,\n    rewardsInfo.rewardTokenDecimals,\n    usdPriceEth\n  );\n\n  const vTokenRewards = totalVariableDebt.gt(0)\n    ? calculateRewards(\n        variableBorrows,\n        poolReserve.vTokenIncentivesIndex,\n        userReserve.vTokenincentivesUserIndex,\n        rewardsInfo.incentivePrecision,\n        rewardsInfo.rewardTokenDecimals,\n        poolReserve.vIncentivesLastUpdateTimestamp,\n        poolReserve.vEmissionPerSecond,\n        totalVariableDebt,\n        currentTimestamp,\n        rewardsInfo.emissionEndTimestamp\n      )\n    : '0';\n\n  const [vTokenRewardsETH, vTokenRewardsUSD] = getEthAndUsdBalance(\n    vTokenRewards,\n    rewardsInfo.rewardTokenPriceEth,\n    rewardsInfo.rewardTokenDecimals,\n    usdPriceEth\n  );\n  const sTokenRewards = totalStableDebt.gt(0)\n    ? calculateRewards(\n        stableBorrows,\n        poolReserve.sTokenIncentivesIndex,\n        userReserve.sTokenincentivesUserIndex,\n        rewardsInfo.incentivePrecision,\n        rewardsInfo.rewardTokenDecimals,\n        poolReserve.sIncentivesLastUpdateTimestamp,\n        poolReserve.sEmissionPerSecond,\n        totalStableDebt,\n        currentTimestamp,\n        rewardsInfo.emissionEndTimestamp\n      )\n    : '0';\n\n  const [sTokenRewardsETH, sTokenRewardsUSD] = getEthAndUsdBalance(\n    sTokenRewards,\n    rewardsInfo.rewardTokenPriceEth,\n    rewardsInfo.rewardTokenDecimals,\n    usdPriceEth\n  );\n\n  return {\n    ...userReserve,\n    underlyingBalance,\n    underlyingBalanceETH,\n    underlyingBalanceUSD,\n    variableBorrows,\n    variableBorrowsETH,\n    variableBorrowsUSD,\n    stableBorrows,\n    stableBorrowsETH,\n    stableBorrowsUSD,\n    totalBorrows: valueToZDBigNumber(variableBorrows)\n      .plus(stableBorrows)\n      .toString(),\n    totalBorrowsETH: valueToZDBigNumber(variableBorrowsETH)\n      .plus(stableBorrowsETH)\n      .toString(),\n    totalBorrowsUSD: valueToZDBigNumber(variableBorrowsUSD)\n      .plus(stableBorrowsUSD)\n      .toString(),\n    aTokenRewards,\n    aTokenRewardsETH,\n    aTokenRewardsUSD,\n    vTokenRewards,\n    vTokenRewardsETH,\n    vTokenRewardsUSD,\n    sTokenRewards,\n    sTokenRewardsETH,\n    sTokenRewardsUSD,\n    totalRewards: valueToZDBigNumber(aTokenRewards)\n      .plus(vTokenRewards)\n      .plus(sTokenRewards)\n      .toString(),\n    totalRewardsETH: valueToZDBigNumber(aTokenRewardsETH)\n      .plus(vTokenRewardsETH)\n      .plus(sTokenRewardsETH)\n      .toString(),\n    totalRewardsUSD: valueToZDBigNumber(aTokenRewardsUSD)\n      .plus(vTokenRewardsUSD)\n      .plus(sTokenRewardsUSD)\n      .toString(),\n  };\n}\n\nexport function computeRawUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number,\n  rewardsInfo: RewardsInformation\n): UserSummaryData {\n  let totalLiquidityETH = valueToZDBigNumber('0');\n  let totalCollateralETH = valueToZDBigNumber('0');\n  let totalBorrowsETH = valueToZDBigNumber('0');\n  let currentLtv = valueToBigNumber('0');\n  let currentLiquidationThreshold = valueToBigNumber('0');\n\n  let totalRewards = valueToBigNumber('0');\n  let totalRewardsETH = valueToBigNumber('0');\n  let totalRewardsUSD = valueToBigNumber('0');\n\n  const userReservesData = rawUserReserves\n    .map((userReserve) => {\n      const poolReserve = poolReservesData.find(\n        (reserve) => reserve.id === userReserve.reserve.id\n      );\n      if (!poolReserve) {\n        throw new Error(\n          'Reserve is not registered on platform, please contact support'\n        );\n      }\n      const computedUserReserve = computeUserReserveData(\n        poolReserve,\n        userReserve,\n        usdPriceEth,\n        currentTimestamp,\n        rewardsInfo\n      );\n\n      totalRewards = totalRewards.plus(computedUserReserve.totalRewards);\n      totalRewardsETH = totalRewardsETH.plus(\n        computedUserReserve.totalRewardsETH\n      );\n      totalRewardsUSD = totalRewardsUSD.plus(\n        computedUserReserve.totalRewardsUSD\n      );\n\n      totalLiquidityETH = totalLiquidityETH.plus(\n        computedUserReserve.underlyingBalanceETH\n      );\n      totalBorrowsETH = totalBorrowsETH\n        .plus(computedUserReserve.variableBorrowsETH)\n        .plus(computedUserReserve.stableBorrowsETH);\n\n      // asset enabled as collateral\n      if (\n        poolReserve.usageAsCollateralEnabled &&\n        userReserve.usageAsCollateralEnabledOnUser\n      ) {\n        totalCollateralETH = totalCollateralETH.plus(\n          computedUserReserve.underlyingBalanceETH\n        );\n        currentLtv = currentLtv.plus(\n          valueToBigNumber(\n            computedUserReserve.underlyingBalanceETH\n          ).multipliedBy(poolReserve.baseLTVasCollateral)\n        );\n        currentLiquidationThreshold = currentLiquidationThreshold.plus(\n          valueToBigNumber(\n            computedUserReserve.underlyingBalanceETH\n          ).multipliedBy(poolReserve.reserveLiquidationThreshold)\n        );\n      }\n      return computedUserReserve;\n    })\n    .sort((a, b) =>\n      a.reserve.symbol > b.reserve.symbol\n        ? 1\n        : a.reserve.symbol < b.reserve.symbol\n        ? -1\n        : 0\n    );\n\n  if (currentLtv.gt(0)) {\n    currentLtv = currentLtv\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n  if (currentLiquidationThreshold.gt(0)) {\n    currentLiquidationThreshold = currentLiquidationThreshold\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n\n  const healthFactor = calculateHealthFactorFromBalances(\n    totalCollateralETH,\n    totalBorrowsETH,\n    currentLiquidationThreshold\n  );\n\n  const totalCollateralUSD = totalCollateralETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalLiquidityUSD = totalLiquidityETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalBorrowsUSD = totalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const availableBorrowsETH = calculateAvailableBorrowsETH(\n    totalCollateralETH,\n    totalBorrowsETH,\n    currentLtv\n  );\n\n  return {\n    totalLiquidityUSD,\n    totalCollateralUSD,\n    totalBorrowsUSD,\n    totalRewards: totalRewards.toString(),\n    totalRewardsETH: totalRewardsETH.toString(),\n    totalRewardsUSD: totalRewardsUSD.toString(),\n    id: userId,\n    totalLiquidityETH: totalLiquidityETH.toString(),\n    totalCollateralETH: totalCollateralETH.toString(),\n    totalBorrowsETH: totalBorrowsETH.toString(),\n    availableBorrowsETH: availableBorrowsETH.toString(),\n    currentLoanToValue: currentLtv.toString(),\n    currentLiquidationThreshold: currentLiquidationThreshold.toString(),\n    healthFactor: healthFactor.toString(),\n    reservesData: userReservesData,\n  };\n}\n\nexport function formatUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number,\n  rewardsInfo: RewardsInformation\n): UserSummaryData {\n  const userData = computeRawUserSummaryData(\n    poolReservesData,\n    rawUserReserves,\n    userId,\n    usdPriceEth,\n    currentTimestamp,\n    rewardsInfo\n  );\n  const userReservesData = userData.reservesData.map(\n    ({ reserve, ...userReserve }): ComputedUserReserve => {\n      const reserveDecimals = reserve.decimals;\n      return {\n        ...userReserve,\n        reserve: {\n          ...reserve,\n          reserveLiquidationBonus: normalize(\n            valueToBigNumber(reserve.reserveLiquidationBonus).minus(\n              pow10(LTV_PRECISION)\n            ),\n            4\n          ),\n          liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n        },\n        scaledATokenBalance: normalize(\n          userReserve.scaledATokenBalance,\n          reserveDecimals\n        ),\n        stableBorrowRate: normalize(userReserve.stableBorrowRate, RAY_DECIMALS),\n        variableBorrowIndex: normalize(\n          userReserve.variableBorrowIndex,\n          RAY_DECIMALS\n        ),\n        underlyingBalance: normalize(\n          userReserve.underlyingBalance,\n          reserveDecimals\n        ),\n        underlyingBalanceETH: normalize(\n          userReserve.underlyingBalanceETH,\n          ETH_DECIMALS\n        ),\n        underlyingBalanceUSD: normalize(\n          userReserve.underlyingBalanceUSD,\n          USD_DECIMALS\n        ),\n        stableBorrows: normalize(userReserve.stableBorrows, reserveDecimals),\n        stableBorrowsETH: normalize(userReserve.stableBorrowsETH, ETH_DECIMALS),\n        stableBorrowsUSD: normalize(userReserve.stableBorrowsUSD, USD_DECIMALS),\n        variableBorrows: normalize(\n          userReserve.variableBorrows,\n          reserveDecimals\n        ),\n        variableBorrowsETH: normalize(\n          userReserve.variableBorrowsETH,\n          ETH_DECIMALS\n        ),\n        variableBorrowsUSD: normalize(\n          userReserve.variableBorrowsUSD,\n          USD_DECIMALS\n        ),\n        totalBorrows: normalize(userReserve.totalBorrows, reserveDecimals),\n        totalBorrowsETH: normalize(userReserve.totalBorrowsETH, ETH_DECIMALS),\n        totalBorrowsUSD: normalize(userReserve.totalBorrowsUSD, USD_DECIMALS),\n      };\n    }\n  );\n  return {\n    id: userData.id,\n    reservesData: userReservesData,\n    totalLiquidityETH: normalize(userData.totalLiquidityETH, ETH_DECIMALS),\n    totalLiquidityUSD: normalize(userData.totalLiquidityUSD, USD_DECIMALS),\n    totalCollateralETH: normalize(userData.totalCollateralETH, ETH_DECIMALS),\n    totalCollateralUSD: normalize(userData.totalCollateralUSD, USD_DECIMALS),\n    totalBorrowsETH: normalize(userData.totalBorrowsETH, ETH_DECIMALS),\n    totalBorrowsUSD: normalize(userData.totalBorrowsUSD, USD_DECIMALS),\n    availableBorrowsETH: normalize(userData.availableBorrowsETH, ETH_DECIMALS),\n    currentLoanToValue: normalize(userData.currentLoanToValue, 4),\n    currentLiquidationThreshold: normalize(\n      userData.currentLiquidationThreshold,\n      4\n    ),\n    healthFactor: userData.healthFactor,\n    totalRewards: userData.totalRewards,\n    totalRewardsETH: userData.totalRewardsETH,\n    totalRewardsUSD: userData.totalRewardsUSD,\n  };\n}\n\n/**\n * Calculates the formatted debt accrued to a given point in time.\n * @param reserve\n * @param currentTimestamp unix timestamp which must be higher than reserve.lastUpdateTimestamp\n */\nexport function calculateReserveDebt(\n  reserve: ReserveData,\n  currentTimestamp: number\n) {\n  const totalVariableDebt = normalize(\n    rayMul(\n      rayMul(reserve.totalScaledVariableDebt, reserve.variableBorrowIndex),\n      calculateCompoundedInterest(\n        reserve.variableBorrowRate,\n        currentTimestamp,\n        reserve.lastUpdateTimestamp\n      )\n    ),\n    reserve.decimals\n  );\n  const totalStableDebt = normalize(\n    rayMul(\n      reserve.totalPrincipalStableDebt,\n      calculateCompoundedInterest(\n        reserve.averageStableRate,\n        currentTimestamp,\n        reserve.stableDebtLastUpdateTimestamp\n      )\n    ),\n    reserve.decimals\n  );\n  return { totalVariableDebt, totalStableDebt };\n}\n\nexport function formatReserves(\n  reserves: ReserveData[],\n  currentTimestamp?: number,\n  reserveIndexes30DaysAgo?: ReserveRatesData[],\n  rewardTokenPriceEth = '0',\n  emissionEndTimestamp?: number\n): ComputedReserveData[] {\n  return reserves.map((reserve) => {\n    const reserve30DaysAgo = reserveIndexes30DaysAgo?.find(\n      (res) => res.id === reserve.id\n    )?.paramsHistory?.[0];\n\n    const availableLiquidity = normalize(\n      reserve.availableLiquidity,\n      reserve.decimals\n    );\n\n    const { totalVariableDebt, totalStableDebt } = calculateReserveDebt(\n      reserve,\n      currentTimestamp || reserve.lastUpdateTimestamp\n    );\n\n    const totalDebt = valueToBigNumber(totalStableDebt).plus(totalVariableDebt);\n\n    const totalLiquidity = totalDebt.plus(availableLiquidity).toString();\n    const utilizationRate =\n      totalLiquidity !== '0'\n        ? totalDebt.dividedBy(totalLiquidity).toString()\n        : '0';\n\n    const hasEmission =\n      emissionEndTimestamp &&\n      emissionEndTimestamp >\n        (currentTimestamp || Math.floor(Date.now() / 1000));\n\n    const aIncentivesAPY =\n      hasEmission && totalLiquidity !== '0'\n        ? calculateIncentivesAPY(\n            reserve.aEmissionPerSecond,\n            rewardTokenPriceEth,\n            totalLiquidity,\n            reserve.price.priceInEth\n          )\n        : '0';\n\n    const vIncentivesAPY =\n      hasEmission && totalVariableDebt !== '0'\n        ? calculateIncentivesAPY(\n            reserve.vEmissionPerSecond,\n            rewardTokenPriceEth,\n            totalVariableDebt,\n            reserve.price.priceInEth\n          )\n        : '0';\n\n    const sIncentivesAPY =\n      hasEmission && totalStableDebt !== '0'\n        ? calculateIncentivesAPY(\n            reserve.sEmissionPerSecond,\n            rewardTokenPriceEth,\n            totalStableDebt,\n            reserve.price.priceInEth\n          )\n        : '0';\n\n    return {\n      ...reserve,\n      totalVariableDebt,\n      totalStableDebt,\n      totalLiquidity,\n      availableLiquidity,\n      utilizationRate,\n      aIncentivesAPY,\n      vIncentivesAPY,\n      sIncentivesAPY,\n      totalDebt: totalDebt.toString(),\n      price: {\n        ...reserve.price,\n        priceInEth: normalize(reserve.price.priceInEth, ETH_DECIMALS),\n      },\n      baseLTVasCollateral: normalize(\n        reserve.baseLTVasCollateral,\n        LTV_PRECISION\n      ),\n      reserveFactor: normalize(reserve.reserveFactor, LTV_PRECISION),\n      variableBorrowRate: normalize(reserve.variableBorrowRate, RAY_DECIMALS),\n      avg30DaysVariableBorrowRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.variableBorrowIndex,\n            reserve.variableBorrowIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n      avg30DaysLiquidityRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.liquidityIndex,\n            reserve.liquidityIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n\n      stableBorrowRate: normalize(reserve.stableBorrowRate, RAY_DECIMALS),\n      liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n      liquidityIndex: normalize(reserve.liquidityIndex, RAY_DECIMALS),\n      reserveLiquidationThreshold: normalize(\n        reserve.reserveLiquidationThreshold,\n        4\n      ),\n      reserveLiquidationBonus: normalize(\n        valueToBigNumber(reserve.reserveLiquidationBonus).minus(\n          10 ** LTV_PRECISION\n        ),\n        4\n      ),\n      totalScaledVariableDebt: normalize(\n        reserve.totalScaledVariableDebt,\n        reserve.decimals\n      ),\n      totalPrincipalStableDebt: normalize(\n        reserve.totalPrincipalStableDebt,\n        reserve.decimals\n      ),\n      variableBorrowIndex: normalize(reserve.variableBorrowIndex, RAY_DECIMALS),\n    };\n  });\n}\n\n/**\n * Calculates the debt accrued to a given point in time.\n * @param reserve\n * @param currentTimestamp unix timestamp which must be higher than reserve.lastUpdateTimestamp\n */\nexport function calculateReserveDebtSuppliesRaw(\n  reserve: ReserveSupplyData,\n  currentTimestamp: number\n) {\n  const totalVariableDebt = rayMul(\n    rayMul(reserve.totalScaledVariableDebt, reserve.variableBorrowIndex),\n    calculateCompoundedInterest(\n      reserve.variableBorrowRate,\n      currentTimestamp,\n      reserve.lastUpdateTimestamp\n    )\n  );\n  const totalStableDebt = rayMul(\n    reserve.totalPrincipalStableDebt,\n    calculateCompoundedInterest(\n      reserve.averageStableRate,\n      currentTimestamp,\n      reserve.stableDebtLastUpdateTimestamp\n    )\n  );\n  return { totalVariableDebt, totalStableDebt };\n}\n\nexport function calculateSupplies(\n  reserve: ReserveSupplyData,\n  currentTimestamp: number\n): Supplies {\n  const {\n    totalVariableDebt,\n    totalStableDebt,\n  } = calculateReserveDebtSuppliesRaw(reserve, currentTimestamp);\n\n  const totalDebt = totalVariableDebt.plus(totalStableDebt);\n\n  const totalLiquidity = totalDebt.plus(reserve.availableLiquidity);\n  return {\n    totalVariableDebt,\n    totalStableDebt,\n    totalLiquidity,\n  };\n}\n\nexport function calculateIncentivesAPY(\n  emissionPerSecond: string,\n  rewardTokenPriceInEth: string,\n  tokenTotalSupplyNormalized: string,\n  tokenPriceInEth: string\n): string {\n  const emissionPerSecondNormalized = normalizeBN(\n    emissionPerSecond,\n    ETH_DECIMALS\n  ).multipliedBy(rewardTokenPriceInEth);\n  const emissionPerYear = emissionPerSecondNormalized.multipliedBy(\n    SECONDS_PER_YEAR\n  );\n\n  const totalSupplyNormalized = valueToBigNumber(\n    tokenTotalSupplyNormalized\n  ).multipliedBy(tokenPriceInEth);\n\n  return emissionPerYear.dividedBy(totalSupplyNormalized).toString(10);\n}\n\nexport function calculateRewards(\n  principalUserBalance: string,\n  reserveIndex: string,\n  userIndex: string,\n  precision: number,\n  rewardTokenDecimals: number,\n  reserveIndexTimestamp: number,\n  emissionPerSecond: string,\n  totalSupply: BigNumber,\n  currentTimestamp: number,\n  emissionEndTimestamp: number\n): string {\n  const actualCurrentTimestamp =\n    currentTimestamp > emissionEndTimestamp\n      ? emissionEndTimestamp\n      : currentTimestamp;\n\n  const timeDelta = actualCurrentTimestamp - reserveIndexTimestamp;\n\n  let currentReserveIndex;\n  if (\n    reserveIndexTimestamp == +currentTimestamp ||\n    reserveIndexTimestamp >= emissionEndTimestamp\n  ) {\n    currentReserveIndex = valueToZDBigNumber(reserveIndex);\n  } else {\n    currentReserveIndex = valueToZDBigNumber(emissionPerSecond)\n      .multipliedBy(timeDelta)\n      .multipliedBy(pow10(precision))\n      .dividedBy(totalSupply)\n      .plus(reserveIndex);\n  }\n\n  const reward = valueToZDBigNumber(principalUserBalance)\n    .multipliedBy(currentReserveIndex.minus(userIndex))\n    .dividedBy(pow10(precision));\n\n  return normalize(reward, rewardTokenDecimals);\n}\n","import { providers, BigNumber, BytesLike, PopulatedTransaction } from 'ethers';\n\nexport type tEthereumAddress = string;\nexport type tStringCurrencyUnits = string; // ex 2.5 eth\nexport type tStringDecimalUnits = string; // ex 2500000000000000000\nexport type ENS = string; // something.eth\n\n/** InterestRate options */\nexport enum InterestRate {\n  None = 'None',\n  Stable = 'Stable',\n  Variable = 'Variable',\n}\n\nexport enum Market {\n  Proto = 'proto',\n  AMM = 'amm',\n}\n\nexport enum Network {\n  mainnet = 'mainnet',\n  ropsten = 'ropsten',\n  kovan = 'kovan',\n  polygon = 'polygon',\n  fork = 'fork',\n  mumbai = 'mumbai',\n  polygon_fork = 'polygon_fork',\n}\n\nexport enum ChainId {\n  mainnet = 1,\n  ropsten = 3,\n  kovan = 42,\n  polygon = 137,\n  fork = 1337,\n  mumbai = 80001,\n  polygon_fork = 1338,\n}\n\nexport enum eEthereumTxType {\n  ERC20_APPROVAL = 'ERC20_APPROVAL',\n  DLP_ACTION = 'DLP_ACTION',\n  GOVERNANCE_ACTION = 'GOVERNANCE_ACTION',\n  GOV_DELEGATION_ACTION = 'GOV_DELEGATION_ACTION',\n  STAKE_ACTION = 'STAKE_ACTION',\n  MIGRATION_LEND_AAVE = 'MIGRATION_LEND_AAVE',\n  FAUCET_MINT = 'FAUCET_MINT',\n  REWARD_ACTION = 'REWARD_ACTION',\n}\n\nexport enum ProtocolAction {\n  default = 'default',\n  withdraw = 'withdraw',\n  deposit = 'deposit',\n  liquidationCall = 'liquidationCall',\n  liquidationFlash = 'liquidationFlash',\n  repay = 'repay',\n  swapCollateral = 'swapCollateral',\n  repayCollateral = 'repayCollateral',\n  withdrawETH = 'withdrawETH',\n  borrowETH = 'borrwoETH',\n}\n\nexport enum GovernanceVote {\n  Abstain = 0,\n  Yes = 1,\n  No = 2,\n}\n\nexport enum Stake {\n  Aave = 'Aave',\n  Balancer = 'Balancer',\n}\n\nexport type GasRecommendationType = {\n  [action: string]: {\n    limit: string;\n    recommended: string;\n  };\n};\n\nexport type GeneratedTx = {\n  tx: transactionType;\n  gas: {\n    price: string;\n    limit: string;\n  };\n};\n\nexport type transactionType = {\n  value?: string;\n  from?: string;\n  to?: string;\n  nonce?: number;\n  gasLimit?: BigNumber;\n  gasPrice?: BigNumber;\n  data?: string;\n  chainId?: number;\n};\n\nexport type AddressModel = {\n  ADDRESS_PROVIDER_ADDRESS: tEthereumAddress;\n  LENDINGPOOL_ADDRESS: tEthereumAddress;\n  LENDINGPOOL_CORE_ADDRESS: tEthereumAddress;\n  SYNTHETIX_PROXY_ADDRESS: tEthereumAddress;\n  GOVERNANCE_PROTO_CONTRACT: tEthereumAddress;\n  LEND_TO_AAVE_MIGRATOR: tEthereumAddress;\n  WETH_GATEWAY: tEthereumAddress;\n  FAUCET: tEthereumAddress;\n  SWAP_COLLATERAL_ADAPTER: tEthereumAddress;\n  REPAY_WITH_COLLATERAL_ADAPTER: tEthereumAddress;\n  AAVE_GOVERNANCE_V2: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_LONG: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_HELPER: tEthereumAddress;\n  FLASHLIQUIDATION: tEthereumAddress;\n  INCENTIVES_CONTROLLER: tEthereumAddress;\n  INCENTIVES_CONTROLLER_REWARD_TOKEN: tEthereumAddress;\n};\n\nexport type tCommonContractAddressBetweenMarkets = Pick<\n  AddressModel,\n  | 'SYNTHETIX_PROXY_ADDRESS'\n  | 'GOVERNANCE_PROTO_CONTRACT'\n  | 'LEND_TO_AAVE_MIGRATOR'\n  | 'WETH_GATEWAY'\n  | 'FAUCET'\n  | 'SWAP_COLLATERAL_ADAPTER'\n  | 'REPAY_WITH_COLLATERAL_ADAPTER'\n  | 'FLASHLIQUIDATION'\n  | 'INCENTIVES_CONTROLLER'\n  | 'INCENTIVES_CONTROLLER_REWARD_TOKEN'\n>;\n\nexport type tDistinctContractAddressBetweenMarkets = Pick<\n  AddressModel,\n  | 'ADDRESS_PROVIDER_ADDRESS'\n  | 'LENDINGPOOL_ADDRESS'\n  | 'LENDINGPOOL_CORE_ADDRESS'\n>;\n\nexport type tDistinctContractAddressBetweenMarketsV2 = Pick<\n  AddressModel,\n  'LENDINGPOOL_ADDRESS'\n>;\n\nexport type tDistinctGovernanceV2Addresses = Pick<\n  AddressModel,\n  | 'AAVE_GOVERNANCE_V2'\n  | 'AAVE_GOVERNANCE_V2_EXECUTOR_SHORT'\n  | 'AAVE_GOVERNANCE_V2_EXECUTOR_LONG'\n  | 'AAVE_GOVERNANCE_V2_HELPER'\n>;\n\nexport type tdistinctStakingAddressesBetweenTokens = {\n  TOKEN_STAKING_ADDRESS: tEthereumAddress;\n  STAKING_REWARD_TOKEN_ADDRESS: tEthereumAddress;\n  STAKING_HELPER_ADDRESS: tEthereumAddress;\n  canUsePermit: boolean;\n};\n\nexport type ContractAddresses = {\n  [contractName: string]: tEthereumAddress;\n};\n\nexport type Configuration = {\n  network: Network;\n  provider:\n    | providers.JsonRpcProvider\n    | providers.BaseProvider\n    | providers.Web3Provider;\n};\n\nexport type EthereumTransactionTypeExtended = {\n  txType: eEthereumTxType;\n  tx: () => Promise<transactionType>;\n  gas: GasResponse;\n};\n\nexport type TransactionGenerationMethod = {\n  rawTxMethod: () => Promise<PopulatedTransaction>;\n  from: tEthereumAddress;\n  value?: string;\n  gasSurplus?: number;\n  action?: ProtocolAction;\n};\n\nexport type TransactionGasGenerationMethod = {\n  txCallback: () => Promise<transactionType>;\n  action?: ProtocolAction;\n};\n\nexport type GasType = {\n  gasLimit: string | undefined;\n  gasPrice: string;\n};\nexport type GasResponse = (force?: boolean) => Promise<GasType | null>;\n\nexport type TokenMetadataType = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n};\n\nexport type DefaultProviderKeys = {\n  etherscan?: string;\n  infura?: string;\n  alchemy?: string;\n};\n\nexport type GovernanceConfigType = {\n  [network: string]: tDistinctGovernanceV2Addresses;\n};\nexport type StakingConfigType = {\n  [sToken: string]: {\n    [network: string]: tdistinctStakingAddressesBetweenTokens;\n  };\n};\n\nexport type CommonConfigType = {\n  [network: string]: tCommonContractAddressBetweenMarkets;\n};\n\nexport type LendingPoolConfigType = {\n  [pool: string]: {\n    [network: string]: tDistinctContractAddressBetweenMarketsV2;\n  };\n};\n\nexport type EnabledNetworksType = {\n  staking: {\n    [sToken: string]: Network[];\n  };\n  lendingPool: {\n    [market: string]: Network[];\n  };\n  governance: Network[];\n  wethGateway: Network[];\n  faucet: Network[];\n  liquiditySwapAdapter: Network[];\n  repayWithCollateralAdapter: Network[];\n  aaveGovernanceV2: Network[];\n  ltaMigrator: Network[];\n  incentivesController: Network[];\n};\n\nexport type PermitSignature = {\n  amount: tStringCurrencyUnits;\n  deadline: string;\n  v: number;\n  r: BytesLike;\n  s: BytesLike;\n};\n\nexport type FlashLoanParams = {\n  assetToSwapToList: tEthereumAddress[]; // List of the addresses of the reserve to be swapped to and deposited\n  minAmountsToReceive: string[]; // List of min amounts to be received from the swap\n  swapAllBalance: boolean[]; // Flag indicating if all the user balance should be swapped\n  permitAmount: string[]; // List of amounts for the permit signature\n  deadline: string[]; // List of deadlines for the permit signature\n  v: number[]; // List of v param for the permit signature\n  r: BytesLike[]; // List of r param for the permit signature\n  s: BytesLike[]; // List of s param for the permit signature\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import {\n  CommonConfigType,\n  GovernanceConfigType,\n  LendingPoolConfigType,\n  Market,\n  Network,\n} from '../../types';\n\nexport const commonContractAddressBetweenMarketsV2: CommonConfigType = {\n  [Network.kovan]: {\n    SYNTHETIX_PROXY_ADDRESS: '',\n    GOVERNANCE_PROTO_CONTRACT: '0x8134929c3dcb1b8b82f27f53424b959fb82182f2',\n    LEND_TO_AAVE_MIGRATOR: '0x8cC8965FEf45a448bdbe3C749683b280eF2E17Ea',\n    WETH_GATEWAY: '0xA61ca04DF33B72b235a8A28CfB535bb7A5271B70',\n    FAUCET: '0x600103d518cC5E8f3319D532eB4e5C268D32e604',\n    SWAP_COLLATERAL_ADAPTER: '0xC18451d36aA370fDACe8d45839bF975F48f7AEa1',\n    REPAY_WITH_COLLATERAL_ADAPTER: '0xf86Be05f535EC2d217E4c6116B3fa147ee5C05A1',\n    FLASHLIQUIDATION: '0x9D50F0b23b1805773f607F0B4678d724322B7AC2',\n    INCENTIVES_CONTROLLER: '',\n    INCENTIVES_CONTROLLER_REWARD_TOKEN: '',\n  },\n  [Network.ropsten]: {\n    SYNTHETIX_PROXY_ADDRESS: '',\n    GOVERNANCE_PROTO_CONTRACT: '',\n    LEND_TO_AAVE_MIGRATOR: '',\n    WETH_GATEWAY: '',\n    FAUCET: '0xcCB8f5183065AF6C40d3A13ae669FB8F92A11C05',\n    SWAP_COLLATERAL_ADAPTER: '',\n    REPAY_WITH_COLLATERAL_ADAPTER: '',\n    FLASHLIQUIDATION: '',\n    INCENTIVES_CONTROLLER: '',\n    INCENTIVES_CONTROLLER_REWARD_TOKEN: '',\n  },\n  [Network.mainnet]: {\n    SYNTHETIX_PROXY_ADDRESS: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f',\n    GOVERNANCE_PROTO_CONTRACT: '0x8a2efd9a790199f4c94c6effe210fce0b4724f52',\n    LEND_TO_AAVE_MIGRATOR: '0x317625234562b1526ea2fac4030ea499c5291de4',\n    WETH_GATEWAY: '0xcc9a0B7c43DC2a5F023Bb9b738E45B0Ef6B06E04',\n    FAUCET: '',\n    SWAP_COLLATERAL_ADAPTER: '0x135896DE8421be2ec868E0b811006171D9df802A',\n    REPAY_WITH_COLLATERAL_ADAPTER: '0x498c5431eb517101582988fbb36431ddaac8f4b1',\n    FLASHLIQUIDATION: '0xE377fB98512D7b04827e56BC84e1838804a8019D',\n    INCENTIVES_CONTROLLER: '0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5',\n    INCENTIVES_CONTROLLER_REWARD_TOKEN:\n      '0x4da27a545c0c5b758a6ba100e3a049001de870f5',\n  },\n  [Network.polygon]: {\n    SYNTHETIX_PROXY_ADDRESS: '',\n    GOVERNANCE_PROTO_CONTRACT: '',\n    LEND_TO_AAVE_MIGRATOR: '',\n    WETH_GATEWAY: '0xbEadf48d62aCC944a06EEaE0A9054A90E5A7dc97',\n    FAUCET: '',\n    SWAP_COLLATERAL_ADAPTER: '0x35784a624D4FfBC3594f4d16fA3801FeF063241c',\n    REPAY_WITH_COLLATERAL_ADAPTER: '',\n    FLASHLIQUIDATION: '',\n    INCENTIVES_CONTROLLER: '0x357d51124f59836ded84c8a1730d72b749d8bc23',\n    INCENTIVES_CONTROLLER_REWARD_TOKEN:\n      '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n  },\n  [Network.mumbai]: {\n    SYNTHETIX_PROXY_ADDRESS: '',\n    GOVERNANCE_PROTO_CONTRACT: '',\n    LEND_TO_AAVE_MIGRATOR: '',\n    WETH_GATEWAY: '0xee9eE614Ad26963bEc1Bec0D2c92879ae1F209fA',\n    FAUCET: '',\n    SWAP_COLLATERAL_ADAPTER: '',\n    REPAY_WITH_COLLATERAL_ADAPTER: '',\n    FLASHLIQUIDATION: '',\n    INCENTIVES_CONTROLLER: '0xd41aE58e803Edf4304334acCE4DC4Ec34a63C644',\n    INCENTIVES_CONTROLLER_REWARD_TOKEN:\n      '0x9c3c9283d3e44854697cd22d3faa240cfb032889',\n  },\n};\n\nexport const distinctContractAddressBetweenMarketsV2: LendingPoolConfigType = {\n  [Market.Proto]: {\n    [Network.kovan]: {\n      LENDINGPOOL_ADDRESS: '0xE0fBa4Fc209b4948668006B2bE61711b7f465bAe',\n    },\n    [Network.ropsten]: {\n      LENDINGPOOL_ADDRESS: '',\n    },\n    [Network.mainnet]: {\n      LENDINGPOOL_ADDRESS: '0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9',\n    },\n    [Network.polygon]: {\n      LENDINGPOOL_ADDRESS: '0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf',\n    },\n    [Network.mumbai]: {\n      LENDINGPOOL_ADDRESS: '0x9198F13B08E299d85E096929fA9781A1E3d5d827',\n    },\n  },\n  [Market.AMM]: {\n    [Network.kovan]: {\n      LENDINGPOOL_ADDRESS: '0x762E2a3BBe729240ea44D31D5a81EAB44d34ef01',\n    },\n    [Network.ropsten]: {\n      LENDINGPOOL_ADDRESS: '',\n    },\n    [Network.mainnet]: {\n      LENDINGPOOL_ADDRESS: '0x7937d4799803fbbe595ed57278bc4ca21f3bffcb',\n    },\n  },\n};\n\nexport const aaveGovernanceV2Addresses: GovernanceConfigType = {\n  [Network.kovan]: {\n    AAVE_GOVERNANCE_V2: '0xc2eBaB3Bac8f2f5028f5C7317027A41EBFCa31D2',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT:\n      '0x462eD5dc919BE6C96639D5f31ab919EBA8F31831', // executor for testing\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG:\n      '0x7e5195b0A6a60b371Ba3276032CF6958eADFA652',\n    AAVE_GOVERNANCE_V2_HELPER: '0xffd5BEb5712952FC9a9DDC7499487422B29Fdda6',\n  },\n  [Network.ropsten]: {\n    AAVE_GOVERNANCE_V2: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG: '',\n    AAVE_GOVERNANCE_V2_HELPER: '',\n  },\n  [Network.mainnet]: {\n    AAVE_GOVERNANCE_V2: '0xEC568fffba86c094cf06b22134B23074DFE2252c',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT:\n      '0x61910EcD7e8e942136CE7Fe7943f956cea1CC2f7',\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG:\n      '0xEE56e2B3D491590B5b31738cC34d5232F378a8D5',\n    AAVE_GOVERNANCE_V2_HELPER: '0x16ff7583ea21055bf5f929ec4b896d997ff35847',\n  },\n  [Network.polygon]: {\n    AAVE_GOVERNANCE_V2: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG: '',\n    AAVE_GOVERNANCE_V2_HELPER: '',\n  },\n  [Network.mumbai]: {\n    AAVE_GOVERNANCE_V2: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG: '',\n    AAVE_GOVERNANCE_V2_HELPER: '',\n  },\n};\n","import { BigNumber, constants } from 'ethers';\nimport {\n  EnabledNetworksType,\n  GasRecommendationType,\n  Market,\n  Network,\n  ProtocolAction,\n  Stake,\n  StakingConfigType,\n} from '../types';\n\nexport const DEFAULT_NULL_VALUE_ON_TX = BigNumber.from(0).toHexString();\nexport const DEFAULT_APPROVE_AMOUNT = constants.MaxUint256.toString();\nexport const MAX_UINT_AMOUNT =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639935';\nexport const SUPER_BIG_ALLOWANCE_NUMBER =\n  '11579208923731619542357098500868790785326998466564056403945758400791';\nexport const API_ETH_MOCK_ADDRESS =\n  '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\nexport const uniswapEthAmount = '0.1';\nexport const SURPLUS = '0.05';\n\nexport const gasLimitRecommendations: GasRecommendationType = {\n  [ProtocolAction.default]: {\n    limit: '210000',\n    recommended: '210000',\n  },\n  [ProtocolAction.deposit]: {\n    limit: '300000',\n    recommended: '300000',\n  },\n  [ProtocolAction.withdraw]: {\n    limit: '230000',\n    recommended: '300000',\n  },\n  [ProtocolAction.liquidationCall]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n  [ProtocolAction.liquidationFlash]: {\n    limit: '995000',\n    recommended: '995000',\n  },\n  [ProtocolAction.repay]: {\n    limit: '300000',\n    recommended: '300000',\n  },\n  [ProtocolAction.borrowETH]: {\n    limit: '450000',\n    recommended: '450000',\n  },\n  [ProtocolAction.withdrawETH]: {\n    limit: '640000',\n    recommended: '640000',\n  },\n  [ProtocolAction.swapCollateral]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n  [ProtocolAction.repayCollateral]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n};\n\nexport const distinctStakingAddressesBetweenTokens: StakingConfigType = {\n  [Stake.Aave]: {\n    [Network.kovan]: {\n      canUsePermit: true,\n      TOKEN_STAKING_ADDRESS: '0xf2fbf9A6710AfDa1c4AaB2E922DE9D69E0C97fd2',\n      STAKING_REWARD_TOKEN_ADDRESS:\n        '0xb597cd8d3217ea6477232f9217fa70837ff667af',\n      STAKING_HELPER_ADDRESS: '0xf267aCc8BF1D8b41c89b6dc1a0aD8439dfbc890c',\n    },\n    [Network.ropsten]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_REWARD_TOKEN_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.mainnet]: {\n      canUsePermit: true,\n      TOKEN_STAKING_ADDRESS: '0x4da27a545c0c5b758a6ba100e3a049001de870f5',\n      STAKING_REWARD_TOKEN_ADDRESS:\n        '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',\n      STAKING_HELPER_ADDRESS: '0xce0424653fb2fd48ed1b621bdbd60db16b2e388a',\n    },\n    [Network.polygon]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_REWARD_TOKEN_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.mumbai]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_REWARD_TOKEN_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n  },\n  [Stake.Balancer]: {\n    [Network.kovan]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '0x31ce45Ab6E26C72c47C52c27498D460099545ef2',\n      STAKING_REWARD_TOKEN_ADDRESS:\n        '0xb597cd8d3217ea6477232f9217fa70837ff667af',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.ropsten]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_REWARD_TOKEN_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.mainnet]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '0xa1116930326D21fB917d5A27F1E9943A9595fb47',\n      STAKING_REWARD_TOKEN_ADDRESS:\n        '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.polygon]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_REWARD_TOKEN_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.mumbai]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_REWARD_TOKEN_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n  },\n};\n\nexport const enabledNetworksByService: EnabledNetworksType = {\n  staking: {\n    [Stake.Balancer]: [Network.kovan, Network.mainnet],\n    [Stake.Aave]: [Network.kovan, Network.mainnet],\n  },\n  lendingPool: {\n    [Market.Proto]: [\n      Network.kovan,\n      Network.mainnet,\n      Network.polygon,\n      Network.mumbai,\n    ],\n    [Market.AMM]: [Network.kovan, Network.mainnet],\n  },\n  governance: [Network.kovan, Network.mainnet],\n  wethGateway: [\n    Network.kovan,\n    Network.mainnet,\n    Network.polygon,\n    Network.mumbai,\n  ],\n  faucet: [Network.kovan],\n  liquiditySwapAdapter: [Network.mainnet, Network.polygon],\n  repayWithCollateralAdapter: [Network.kovan, Network.mainnet],\n  aaveGovernanceV2: [Network.kovan, Network.mainnet],\n  ltaMigrator: [Network.kovan, Network.mainnet],\n  incentivesController: [Network.polygon, Network.mumbai, Network.mainnet],\n};\n\nexport * from './v2/addresses';\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveGovernanceV2 } from \"../IAaveGovernanceV2\";\n\nexport class IAaveGovernanceV2__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveGovernanceV2 {\n    return new Contract(address, _abi, signerOrProvider) as IAaveGovernanceV2;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"ExecutorAuthorized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"ExecutorUnauthorized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newStrategy\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorChange\",\n        type: \"address\",\n      },\n    ],\n    name: \"GovernanceStrategyChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ProposalCanceled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"creator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IExecutorWithTimelock\",\n        name: \"executor\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address[]\",\n        name: \"targets\",\n        type: \"address[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"values\",\n        type: \"uint256[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"string[]\",\n        name: \"signatures\",\n        type: \"string[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes[]\",\n        name: \"calldatas\",\n        type: \"bytes[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool[]\",\n        name: \"withDelegatecalls\",\n        type: \"bool[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startBlock\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endBlock\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"strategy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"ipfsHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"ProposalCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorExecution\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProposalExecuted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"executionTime\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorQueueing\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProposalQueued\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"voter\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"votingPower\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"VoteEmitted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newVotingDelay\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorChange\",\n        type: \"address\",\n      },\n    ],\n    name: \"VotingDelayChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"__abdicate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"executors\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"authorizeExecutors\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"cancel\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IExecutorWithTimelock\",\n        name: \"executor\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"targets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"values\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"string[]\",\n        name: \"signatures\",\n        type: \"string[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"calldatas\",\n        type: \"bytes[]\",\n      },\n      {\n        internalType: \"bool[]\",\n        name: \"withDelegatecalls\",\n        type: \"bool[]\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"ipfsHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGovernanceStrategy\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGuardian\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProposalById\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IAaveGovernanceV2.ProposalWithoutVotes\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProposalState\",\n    outputs: [\n      {\n        internalType: \"enum IAaveGovernanceV2.ProposalState\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProposalsCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"voter\",\n        type: \"address\",\n      },\n    ],\n    name: \"getVoteOnProposal\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"support\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint248\",\n            name: \"votingPower\",\n            type: \"uint248\",\n          },\n        ],\n        internalType: \"struct IAaveGovernanceV2.Vote\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVotingDelay\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"isExecutorAuthorized\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"queue\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"governanceStrategy\",\n        type: \"address\",\n      },\n    ],\n    name: \"setGovernanceStrategy\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"votingDelay\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setVotingDelay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n    ],\n    name: \"submitVote\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"submitVoteBySignature\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"executors\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"unauthorizeExecutors\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveIncentivesController } from \"../IAaveIncentivesController\";\n\nexport class IAaveIncentivesController__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveIncentivesController {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IAaveIncentivesController;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"claimRewards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveStakingHelper } from \"../IAaveStakingHelper\";\n\nexport class IAaveStakingHelper__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveStakingHelper {\n    return new Contract(address, _abi, signerOrProvider) as IAaveStakingHelper;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IDebtTokenBase } from \"../IDebtTokenBase\";\n\nexport class IDebtTokenBase__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IDebtTokenBase {\n    return new Contract(address, _abi, signerOrProvider) as IDebtTokenBase;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approveDelegation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"fromUser\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"toUser\",\n        type: \"address\",\n      },\n    ],\n    name: \"borrowAllowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IERC20Detailed } from \"../IERC20Detailed\";\n\nexport class IERC20Detailed__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IERC20Detailed {\n    return new Contract(address, _abi, signerOrProvider) as IERC20Detailed;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IFaucet } from \"../IFaucet\";\n\nexport class IFaucet__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IFaucet {\n    return new Contract(address, _abi, signerOrProvider) as IFaucet;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMinter\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernancePowerDelegationToken } from \"../IGovernancePowerDelegationToken\";\n\nexport class IGovernancePowerDelegationToken__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernancePowerDelegationToken {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IGovernancePowerDelegationToken;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"delegator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"DelegateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"DelegatedPowerChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"_nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n    ],\n    name: \"delegate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"delegateBySig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"delegateByType\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"delegateByTypeBySig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getDelegateeByType\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPowerAtBlock\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPowerCurrent\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"totalSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernanceStrategy } from \"../IGovernanceStrategy\";\n\nexport class IGovernanceStrategy__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernanceStrategy {\n    return new Contract(address, _abi, signerOrProvider) as IGovernanceStrategy;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"AAVE\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"STK_AAVE\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPropositionPowerAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalPropositionSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalVotingSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getVotingPowerAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernanceV2Helper } from \"../IGovernanceV2Helper\";\n\nexport class IGovernanceV2Helper__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernanceV2Helper {\n    return new Contract(address, _abi, signerOrProvider) as IGovernanceV2Helper;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IAaveGovernanceV2\",\n        name: \"governance\",\n        type: \"address\",\n      },\n    ],\n    name: \"getProposal\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"totalVotingSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumQuorum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumDiff\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTimeWithGracePeriod\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"proposalCreated\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IAaveGovernanceV2.ProposalState\",\n            name: \"proposalState\",\n            type: \"uint8\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.ProposalStats\",\n        name: \"proposalStats\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"skip\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IAaveGovernanceV2\",\n        name: \"governance\",\n        type: \"address\",\n      },\n    ],\n    name: \"getProposals\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"totalVotingSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumQuorum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumDiff\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTimeWithGracePeriod\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"proposalCreated\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IAaveGovernanceV2.ProposalState\",\n            name: \"proposalState\",\n            type: \"uint8\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.ProposalStats[]\",\n        name: \"proposalsStats\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getTokensPower\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"votingPower\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"delegatedAddressVotingPower\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"propositionPower\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"delegatedAddressPropositionPower\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.Power[]\",\n        name: \"power\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ILendingPool } from \"../ILendingPool\";\n\nexport class ILendingPool__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ILendingPool {\n    return new Contract(address, _abi, signerOrProvider) as ILendingPool;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"FLASHLOAN_PREMIUM_TOTAL\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interestRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"borrow\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"modes\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"flashLoan\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"collateral\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"purchaseAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"receiveAToken\",\n        type: \"bool\",\n      },\n    ],\n    name: \"liquidationCall\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"useAsCollateral\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setUserUseReserveAsCollateral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapBorrowRateMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ILendToAaveMigrator } from \"../ILendToAaveMigrator\";\n\nexport class ILendToAaveMigrator__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ILendToAaveMigrator {\n    return new Contract(address, _abi, signerOrProvider) as ILendToAaveMigrator;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"LEND\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"migrateFromLEND\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IMinter } from \"../IMinter\";\n\nexport class IMinter__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IMinter {\n    return new Contract(address, _abi, signerOrProvider) as IMinter;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"isEthRequired\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IRepayWithCollateral } from \"../IRepayWithCollateral\";\n\nexport class IRepayWithCollateral__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IRepayWithCollateral {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IRepayWithCollateral;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"collateralAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"debtAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"collateralAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"debtRepayAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"debtRateMode\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IRepayWithCollateral.PermitSignature\",\n        name: \"permitSignature\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"useEthPath\",\n        type: \"bool\",\n      },\n    ],\n    name: \"swapAndRepay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IStakedToken } from \"../IStakedToken\";\n\nexport class IStakedToken__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IStakedToken {\n    return new Contract(address, _abi, signerOrProvider) as IStakedToken;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"REWARD_TOKEN\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"STAKED_TOKEN\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"claimRewards\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"cooldown\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IParaSwapLiquiditySwapAdapter } from \"../IParaSwapLiquiditySwapAdapter\";\n\nexport class IParaSwapLiquiditySwapAdapter__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IParaSwapLiquiditySwapAdapter {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IParaSwapLiquiditySwapAdapter;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"assetToSwapFrom\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"assetToSwapTo\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amountToSwap\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minAmountToReceive\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapAllBalanceOffset\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"swapCalldata\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"address\",\n        name: \"augustus\",\n        type: \"address\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IParaSwapLiquiditySwapAdapter.PermitSignature\",\n        name: \"permitParams\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"swapAndDeposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ISynthetix } from \"../ISynthetix\";\n\nexport class ISynthetix__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ISynthetix {\n    return new Contract(address, _abi, signerOrProvider) as ISynthetix;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferableSynthetix\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"transferable\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IWETHGateway } from \"../IWETHGateway\";\n\nexport class IWETHGateway__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IWETHGateway {\n    return new Contract(address, _abi, signerOrProvider) as IWETHGateway;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interesRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"borrowETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repayETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"lendingPool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","import BigNumber from 'bignumber.js';\nimport {\n  API_ETH_MOCK_ADDRESS,\n  DEFAULT_NULL_VALUE_ON_TX,\n  uniswapEthAmount,\n} from '../config';\nimport { tStringDecimalUnits } from '../types';\n\nexport const parseNumber = (value: string, decimals: number): string => {\n  return new BigNumber(value)\n    .multipliedBy(new BigNumber(10).pow(decimals))\n    .toFixed(0);\n};\n\nexport const decimalsToCurrencyUnits = (\n  value: string,\n  decimals: number\n): string =>\n  new BigNumber(value).div(new BigNumber(10).pow(decimals)).toFixed();\n\nexport const getTxValue = (reserve: string, amount: string): string => {\n  return reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()\n    ? amount\n    : DEFAULT_NULL_VALUE_ON_TX;\n};\n\nexport const mintAmountsPerToken: { [token: string]: tStringDecimalUnits } = {\n  AAVE: parseNumber('100', 18),\n  BAT: parseNumber('100000', 18),\n  BUSD: parseNumber('10000', 18),\n  DAI: parseNumber('10000', 18),\n  ENJ: parseNumber('100000', 18),\n  KNC: parseNumber('10000', 18),\n  LEND: parseNumber('1000', 18), // Not available on v2, but to support v1 faucet\n  LINK: parseNumber('1000', 18),\n  MANA: parseNumber('100000', 18),\n  MKR: parseNumber('10', 18),\n  REN: parseNumber('10000', 18),\n  REP: parseNumber('1000', 18),\n  SNX: parseNumber('100', 18),\n  SUSD: parseNumber('10000', 18),\n  TUSD: '0', // The TusdMinter contract already mints the maximum\n  UNI: parseNumber('1000', 18),\n  USDC: parseNumber('10000', 6),\n  USDT: parseNumber('10000', 6),\n  WBTC: parseNumber('1', 8),\n  YFI: parseNumber('1', 18),\n  ZRX: parseNumber('100000', 18),\n  UNIUSDC: parseNumber(uniswapEthAmount, 6),\n  UNIDAI: parseNumber(uniswapEthAmount, 18),\n  UNIUSDT: parseNumber(uniswapEthAmount, 6),\n  UNIDAIETH: parseNumber(uniswapEthAmount, 18),\n  UNIUSDCETH: parseNumber(uniswapEthAmount, 18),\n  UNISETHETH: parseNumber(uniswapEthAmount, 18),\n  UNILENDETH: parseNumber(uniswapEthAmount, 18),\n  UNILINKETH: parseNumber(uniswapEthAmount, 18),\n  UNIMKRETH: parseNumber(uniswapEthAmount, 18),\n};\n\nexport const canBeEnsAddress = (ensAddress: string): boolean => {\n  return ensAddress.toLowerCase().endsWith('.eth');\n};\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport 'reflect-metadata';\n\nexport const isEthAddressMetadataKey = Symbol('ethAddress');\nexport const isEthAddressArrayMetadataKey = Symbol('ethAddressArray');\nexport const isEthAddressOrENSMetadataKey = Symbol('ethOrENSAddress');\nexport const isPositiveMetadataKey = Symbol('isPositive');\nexport const isPositiveOrMinusOneMetadataKey = Symbol('isPositiveOrMinusOne');\nexport const is0OrPositiveMetadataKey = Symbol('is0OrPositiveMetadataKey');\nexport const optionalMetadataKey = Symbol('Optional');\n\nexport type paramsType = {\n  index: number;\n  field: string | undefined;\n};\n\n// tslint:disable-next-line: function-name\nexport function IsEthAddress(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(isEthAddressMetadataKey, target, propertyKey) ||\n      [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\n// tslint:disable-next-line: function-name\nexport function IsEthAddressArray(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(isEthAddressMetadataKey, target, propertyKey) ||\n      [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressArrayMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsEthAddressOrENS(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(\n        isEthAddressOrENSMetadataKey,\n        target,\n        propertyKey\n      ) || [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressOrENSMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsPositiveAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(isPositiveMetadataKey, target, propertyKey) || [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(isPositiveMetadataKey, params, target, propertyKey);\n  };\n}\n\nexport function Is0OrPositiveAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(is0OrPositiveMetadataKey, target, propertyKey) ||\n      [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(\n      is0OrPositiveMetadataKey,\n      params,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsPositiveOrMinusOneAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(\n        isPositiveOrMinusOneMetadataKey,\n        target,\n        propertyKey\n      ) || [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(\n      isPositiveOrMinusOneMetadataKey,\n      params,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function Optional(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyKey: string | symbol,\n  parameterIndex: number\n): void {\n  const existingOptionalParameters =\n    Reflect.getOwnMetadata(optionalMetadataKey, target, propertyKey) || [];\n  existingOptionalParameters.push(parameterIndex);\n  Reflect.defineMetadata(\n    optionalMetadataKey,\n    existingOptionalParameters,\n    target,\n    propertyKey\n  );\n}\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { utils } from 'ethers';\nimport { canBeEnsAddress } from '../utils/parsings';\n// import 'reflect-metadata';\nimport {\n  is0OrPositiveMetadataKey,\n  isEthAddressArrayMetadataKey,\n  isEthAddressMetadataKey,\n  isEthAddressOrENSMetadataKey,\n  isPositiveMetadataKey,\n  isPositiveOrMinusOneMetadataKey,\n  optionalMetadataKey,\n  paramsType,\n} from './paramValidators';\n\nexport function optionalValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any\n): boolean[] {\n  const optionalParameters = Reflect.getOwnMetadata(\n    optionalMetadataKey,\n    target,\n    propertyName\n  );\n\n  const isParamOptional: boolean[] = [];\n  if (optionalParameters) {\n    optionalParameters.forEach((parameterIndex: number) => {\n      if (methodArguments[parameterIndex] == null) {\n        isParamOptional[parameterIndex] = true;\n      }\n    });\n  }\n  return isParamOptional;\n}\n\nexport function isEthAddressValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          throw new Error(\n            `Address: ${\n              methodArguments[0][storedParams.field]\n            } is not a valid ethereum Address`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional &&\n          !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          throw new Error(\n            `Address: ${\n              methodArguments[storedParams.index]\n            } is not a valid ethereum Address`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function isEthAddressArrayValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressArrayMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field]\n          // !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          if (methodArguments[0][storedParams.field].length > 0) {\n            const fieldArray = methodArguments[0][storedParams.field].split(\n              ','\n            );\n            fieldArray.forEach((address: string) => {\n              if (!utils.isAddress(address)) {\n                throw new Error(\n                  `Address: ${address} is not a valid ethereum Address`\n                );\n              }\n            });\n          }\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional\n          // !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          if (methodArguments[storedParams.index].length > 0) {\n            const fieldArray = methodArguments[storedParams.index].split(',');\n            fieldArray.forEach((address: string) => {\n              if (!utils.isAddress(address)) {\n                throw new Error(\n                  `Address: ${address} is not a valid ethereum Address`\n                );\n              }\n            });\n          }\n        }\n      }\n    });\n  }\n}\n\nexport function isEthAddressOrEnsValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressOrENSMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          if (!canBeEnsAddress(methodArguments[0][storedParams.field])) {\n            throw new Error(\n              `Address ${\n                methodArguments[0][storedParams.field]\n              } is not valid ENS format or a valid ethereum Address`\n            );\n          }\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional &&\n          !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          if (!canBeEnsAddress(methodArguments[storedParams.index])) {\n            throw new Error(\n              `Address ${\n                methodArguments[storedParams.index]\n              } is not valid ENS format or a valid ethereum Address`\n            );\n          }\n        }\n      }\n    });\n  }\n}\n\nexport function amountGtThan0Validator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountParameters: paramsType[] = Reflect.getOwnMetadata(\n    isPositiveMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountParameters) {\n    amountParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(Number(methodArguments[0][storedParams.field]) > 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (!isOptional && !(Number(methodArguments[storedParams.index]) > 0)) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function amount0OrPositiveValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountParameters: paramsType[] = Reflect.getOwnMetadata(\n    is0OrPositiveMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountParameters) {\n    amountParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(Number(methodArguments[0][storedParams.field]) >= 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          !isOptional &&\n          !(Number(methodArguments[storedParams.index]) >= 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function amountGtThan0OrMinus1(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountMinusOneParameters: paramsType[] = Reflect.getOwnMetadata(\n    isPositiveOrMinusOneMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountMinusOneParameters) {\n    amountMinusOneParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(\n            Number(methodArguments[0][storedParams.field]) > 0 ||\n            methodArguments[0][storedParams.field] === '-1'\n          )\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0 or -1`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          !isOptional &&\n          !(\n            Number(methodArguments[storedParams.index]) > 0 ||\n            methodArguments[storedParams.index] === '-1'\n          )\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0 or -1`\n          );\n        }\n      }\n    });\n  }\n}\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Network } from '../types';\nimport {\n  amount0OrPositiveValidator,\n  amountGtThan0OrMinus1,\n  amountGtThan0Validator,\n  // isEthAddressArrayValidator,\n  isEthAddressOrEnsValidator,\n  isEthAddressValidator,\n  optionalValidator,\n} from './validations';\nimport { enabledNetworksByService } from '../config';\n\nexport function LPValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.lendingPool[this.market];\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LTAMigratorValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] = enabledNetworksByService.ltaMigrator;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function IncentivesValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.incentivesController;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    // isEthAddressArrayValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LiquiditySwapValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.liquiditySwapAdapter;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function RepayWithCollateralValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.repayWithCollateralAdapter;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function StakingValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.staking[this.tokenStake];\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    const isParamOptional = optionalValidator(target, propertyName, arguments);\n\n    isEthAddressValidator(target, propertyName, arguments, isParamOptional);\n\n    amountGtThan0Validator(target, propertyName, arguments, isParamOptional);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function FaucetValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] = enabledNetworksByService.faucet;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    const isParamOptional = optionalValidator(target, propertyName, arguments);\n\n    isEthAddressValidator(target, propertyName, arguments, isParamOptional);\n\n    amountGtThan0Validator(target, propertyName, arguments, isParamOptional);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function WETHValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] = enabledNetworksByService.wethGateway;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function GovValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.aaveGovernanceV2;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amount0OrPositiveValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function GovDelegationValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.aaveGovernanceV2;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n    isEthAddressOrEnsValidator(target, propertyName, arguments);\n    amountGtThan0Validator(target, propertyName, arguments);\n    amount0OrPositiveValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n","import { BigNumber } from 'ethers';\nimport { transactionType, Configuration, Network } from '../types';\n\nconst DEFAULT_SURPLUS = 30; // 30%\n// polygon gas estimation is very off for some reason\nconst POLYGON_SURPLUS = 60; // 60%\n\nexport const estimateGas = async (\n  tx: transactionType,\n  config: Configuration,\n  gasSurplus?: number\n): Promise<BigNumber> => {\n  const estimatedGas = await config.provider.estimateGas(tx);\n  return estimatedGas.add(\n    estimatedGas.mul(gasSurplus || DEFAULT_SURPLUS).div(100)\n  );\n};\n\nexport const estimateGasByNetwork = async (\n  tx: transactionType,\n  config: Configuration,\n  gasSurplus?: number\n): Promise<BigNumber> => {\n  const estimatedGas = await config.provider.estimateGas(tx);\n\n  const { network } = config;\n  if (network === Network.polygon) {\n    return estimatedGas.add(estimatedGas.mul(POLYGON_SURPLUS).div(100));\n  }\n\n  return estimatedGas.add(\n    estimatedGas.mul(gasSurplus || DEFAULT_SURPLUS).div(100)\n  );\n};\n\nexport const getGasPrice = async (\n  config: Configuration\n): Promise<BigNumber> => {\n  const gasPrice = await config.provider.getGasPrice();\n  return gasPrice;\n};\n","import { BigNumber, Contract, PopulatedTransaction } from 'ethers';\nimport {\n  Configuration,\n  tEthereumAddress,\n  TransactionGenerationMethod,\n  transactionType,\n  GasResponse,\n  ProtocolAction,\n  EthereumTransactionTypeExtended,\n  eEthereumTxType,\n} from '../types';\nimport { ContractsFactory } from '../interfaces/ContractsFactory';\nimport { estimateGasByNetwork, getGasPrice } from '../utils/gasStation';\nimport { DEFAULT_NULL_VALUE_ON_TX, gasLimitRecommendations } from '../config';\n\nexport default class BaseService<T extends Contract> {\n  readonly contractInstances: { [address: string]: T };\n\n  readonly contractFactory: ContractsFactory;\n\n  readonly config: Configuration;\n\n  constructor(config: Configuration, contractFactory: ContractsFactory) {\n    this.config = config;\n    this.contractFactory = contractFactory;\n    this.contractInstances = {};\n  }\n\n  public getContractInstance = (address: tEthereumAddress): T => {\n    if (!this.contractInstances[address]) {\n      const { provider }: Configuration = this.config;\n      this.contractInstances[address] = this.contractFactory.connect(\n        address,\n        provider\n      ) as T;\n    }\n\n    return this.contractInstances[address];\n  };\n\n  readonly generateTxCallback = ({\n    rawTxMethod,\n    from,\n    value,\n    gasSurplus,\n    action,\n  }: TransactionGenerationMethod): (() => Promise<transactionType>) => async () => {\n    const txRaw: PopulatedTransaction = await rawTxMethod();\n\n    const tx: transactionType = {\n      ...txRaw,\n      from,\n      value: value || DEFAULT_NULL_VALUE_ON_TX,\n    };\n\n    tx.gasLimit = await estimateGasByNetwork(tx, this.config, gasSurplus);\n\n    if (\n      action &&\n      gasLimitRecommendations[action] &&\n      tx.gasLimit.lte(BigNumber.from(gasLimitRecommendations[action].limit))\n    ) {\n      tx.gasLimit = BigNumber.from(gasLimitRecommendations[action].recommended);\n    }\n\n    return tx;\n  };\n\n  readonly generateTxPriceEstimation = (\n    txs: EthereumTransactionTypeExtended[],\n    txCallback: () => Promise<transactionType>,\n    action: string = ProtocolAction.default\n  ): GasResponse => async (force = false) => {\n    try {\n      const gasPrice = await getGasPrice(this.config);\n      const hasPendingApprovals = txs.find(\n        (tx) => tx.txType === eEthereumTxType.ERC20_APPROVAL\n      );\n      if (!hasPendingApprovals || force) {\n        const {\n          gasLimit,\n          gasPrice: gasPriceProv,\n        }: transactionType = await txCallback();\n        if (!gasLimit) {\n          // If we don't recieve the correct gas we throw a error\n          throw new Error('Transaction calculation error');\n        }\n\n        return {\n          gasLimit: gasLimit.toString(),\n          gasPrice: gasPriceProv\n            ? gasPriceProv.toString()\n            : gasPrice.toString(),\n        };\n      }\n      return {\n        gasLimit: gasLimitRecommendations[action].recommended,\n        gasPrice: gasPrice.toString(),\n      };\n    } catch (error) {\n      console.error(\n        'Calculate error on calculate estimation gas price.',\n        error\n      );\n      return null;\n    }\n  };\n}\n","import { commonContractAddressBetweenMarketsV2 } from '../config';\nimport {\n  IParaSwapLiquiditySwapAdapter__factory,\n  IParaSwapLiquiditySwapAdapter,\n} from '../contract-types';\nimport LiquiditySwapAdapterInterface from '../interfaces/LiquiditySwapAdapterParaswap';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  transactionType,\n} from '../types';\nimport { SwapAndDepositMethodType } from '../types/LiquiditySwapAdapterParaswapMethodTypes';\nimport { LiquiditySwapValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport function augustusFromAmountOffsetFromCalldata(calldata: string) {\n  switch (calldata.slice(0, 10)) {\n    case '0xda8567c8': // Augustus V3 multiSwap\n      return 4 + 32 + 2 * 32;\n    case '0x58b9d179': // Augustus V4 swapOnUniswap\n      return 4;\n    case '0x0863b7ac': // Augustus V4 swapOnUniswapFork\n      return 4 + 2 * 32;\n    case '0x8f00eccb': // Augustus V4 multiSwap\n      return 4 + 32 + 32;\n    case '0xec1d21dd': // Augustus V4 megaSwap\n      return 4 + 32 + 32;\n    default:\n      throw new Error('Unrecognized function selector for Augustus');\n  }\n}\n\nexport default class LiquiditySwapAdapterService\n  extends BaseService<IParaSwapLiquiditySwapAdapter>\n  implements LiquiditySwapAdapterInterface {\n  readonly liquiditySwapAdapterAddress: string;\n\n  constructor(config: Configuration) {\n    super(config, IParaSwapLiquiditySwapAdapter__factory);\n\n    const { SWAP_COLLATERAL_ADAPTER } = commonContractAddressBetweenMarketsV2[\n      this.config.network\n    ];\n    this.liquiditySwapAdapterAddress = SWAP_COLLATERAL_ADAPTER;\n  }\n\n  @LiquiditySwapValidator\n  public swapAndDeposit(\n    @IsEthAddress('user')\n    @IsEthAddress('assetToSwapFrom')\n    @IsEthAddress('assetToSwapTo')\n    @IsEthAddress('augustus')\n    @IsPositiveAmount('amountToSwap')\n    @IsPositiveAmount('minAmountToReceive')\n    {\n      user,\n      assetToSwapFrom,\n      assetToSwapTo,\n      amountToSwap,\n      minAmountToReceive,\n      permitParams,\n      augustus,\n      swapCallData,\n      swapAll,\n    }: SwapAndDepositMethodType\n  ): EthereumTransactionTypeExtended {\n    const liquiditySwapContract = this.getContractInstance(\n      this.liquiditySwapAdapterAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        liquiditySwapContract.populateTransaction.swapAndDeposit(\n          assetToSwapFrom,\n          assetToSwapTo,\n          amountToSwap,\n          minAmountToReceive,\n          swapAll\n            ? augustusFromAmountOffsetFromCalldata(swapCallData as string)\n            : 0,\n          swapCallData,\n          augustus,\n          permitParams\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  }\n}\n","import { constants, utils, BigNumberish, BytesLike } from 'ethers';\nimport {\n  API_ETH_MOCK_ADDRESS,\n  commonContractAddressBetweenMarketsV2,\n  DEFAULT_APPROVE_AMOUNT,\n  MAX_UINT_AMOUNT,\n  distinctContractAddressBetweenMarketsV2,\n  SURPLUS,\n} from '../../config';\nimport { ILendingPool, ILendingPool__factory } from '../../contract-types';\nimport IERC20ServiceInterface from '../../interfaces/ERC20';\nimport SynthetixInterface from '../../interfaces/Synthetix';\nimport LendingPoolInterface from '../../interfaces/v2/LendingPool';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  InterestRate,\n  Market,\n  ProtocolAction,\n  TokenMetadataType,\n  transactionType,\n  tStringDecimalUnits,\n  tEthereumAddress,\n} from '../../types';\nimport { getTxValue, parseNumber } from '../../utils/parsings';\nimport { LPValidator } from '../../validators/methodValidators';\nimport {\n  LPBorrowParamsType,\n  LPDepositParamsType,\n  LPLiquidationCall,\n  LPRepayParamsType,\n  LPRepayWithCollateral,\n  LPSetUsageAsCollateral,\n  LPSwapBorrowRateMode,\n  LPSwapCollateral,\n  LPWithdrawParamsType,\n  LPFlashLiquidation,\n} from '../../types/LendingPoolMethodTypes';\nimport WETHGatewayInterface from '../../interfaces/WETHGateway';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n} from '../../validators/paramValidators';\nimport LiquiditySwapAdapterInterface from '../../interfaces/LiquiditySwapAdapterParaswap';\nimport RepayWithCollateralAdapterInterface from '../../interfaces/RepayWithCollateralAdapter';\nimport BaseService from '../BaseService';\nimport { augustusFromAmountOffsetFromCalldata } from '../LiquiditySwapAdapterParaswap';\n\nconst buildParaSwapLiquiditySwapParams = (\n  assetToSwapTo: tEthereumAddress,\n  minAmountToReceive: BigNumberish,\n  swapAllBalanceOffset: BigNumberish,\n  swapCalldata: string | Buffer | BytesLike,\n  augustus: tEthereumAddress,\n  permitAmount: BigNumberish,\n  deadline: BigNumberish,\n  v: BigNumberish,\n  r: string | Buffer | BytesLike,\n  s: string | Buffer | BytesLike\n) => {\n  return utils.defaultAbiCoder.encode(\n    [\n      'address',\n      'uint256',\n      'uint256',\n      'bytes',\n      'address',\n      'tuple(uint256,uint256,uint8,bytes32,bytes32)',\n    ],\n    [\n      assetToSwapTo,\n      minAmountToReceive,\n      swapAllBalanceOffset,\n      swapCalldata,\n      augustus,\n      [permitAmount, deadline, v, r, s],\n    ]\n  );\n};\n\nexport default class LendingPool\n  extends BaseService<ILendingPool>\n  implements LendingPoolInterface {\n  readonly market: Market;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly lendingPoolAddress: string;\n\n  readonly synthetixService: SynthetixInterface;\n\n  readonly wethGatewayService: WETHGatewayInterface;\n\n  readonly liquiditySwapAdapterService: LiquiditySwapAdapterInterface;\n\n  readonly repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface;\n\n  constructor(\n    config: Configuration,\n    erc20Service: IERC20ServiceInterface,\n    synthetixService: SynthetixInterface,\n    wethGatewayService: WETHGatewayInterface,\n    liquiditySwapAdapterService: LiquiditySwapAdapterInterface,\n    repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface,\n    market: Market\n  ) {\n    super(config, ILendingPool__factory);\n    this.erc20Service = erc20Service;\n    this.synthetixService = synthetixService;\n    this.wethGatewayService = wethGatewayService;\n    this.liquiditySwapAdapterService = liquiditySwapAdapterService;\n    this.repayWithCollateralAdapterService = repayWithCollateralAdapterService;\n    this.market = market;\n\n    const { network } = this.config;\n    this.lendingPoolAddress =\n      distinctContractAddressBetweenMarketsV2[this.market][\n        network\n      ].LENDINGPOOL_ADDRESS;\n  }\n\n  @LPValidator\n  public async deposit(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    { user, reserve, amount, onBehalfOf, referralCode }: LPDepositParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return this.wethGatewayService.depositETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        onBehalfOf,\n        referralCode,\n      });\n    }\n    const {\n      isApproved,\n      approve,\n      decimalsOf,\n    }: IERC20ServiceInterface = this.erc20Service;\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const reserveDecimals: number = await decimalsOf(reserve);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      reserveDecimals\n    );\n\n    const fundsAvailable: boolean = await this.synthetixService.synthetixValidation(\n      user,\n      reserve,\n      convertedAmount\n    );\n    if (!fundsAvailable) {\n      throw new Error('Not enough funds to execute operation');\n    }\n\n    const approved = await isApproved(\n      reserve,\n      user,\n      this.lendingPoolAddress,\n      amount\n    );\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        reserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.deposit(\n          reserve,\n          convertedAmount,\n          onBehalfOf || user,\n          referralCode || '0'\n        ),\n      from: user,\n      value: getTxValue(reserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.deposit\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async withdraw(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    @IsEthAddress('aTokenAddress')\n    { user, reserve, amount, onBehalfOf, aTokenAddress }: LPWithdrawParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      if (!aTokenAddress) {\n        throw new Error(\n          'To withdraw ETH you need to pass the aWETH token address'\n        );\n      }\n\n      return this.wethGatewayService.withdrawETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        onBehalfOf,\n        aTokenAddress,\n      });\n    }\n    const { decimalsOf }: IERC20ServiceInterface = this.erc20Service;\n    const decimals: number = await decimalsOf(reserve);\n\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, decimals);\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.withdraw(\n          reserve,\n          convertedAmount,\n          onBehalfOf || user\n        ),\n      from: user,\n      action: ProtocolAction.withdraw,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          [],\n          txCallback,\n          ProtocolAction.withdraw\n        ),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async borrow(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('debtTokenAddress')\n    @IsEthAddress('onBehalfOf')\n    {\n      user,\n      reserve,\n      amount,\n      interestRateMode,\n      debtTokenAddress,\n      onBehalfOf,\n      referralCode,\n    }: LPBorrowParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      if (!debtTokenAddress) {\n        throw new Error(\n          `To borrow ETH you need to pass the stable or variable WETH debt Token Address corresponding the interestRateMode`\n        );\n      }\n      return this.wethGatewayService.borrowETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        debtTokenAddress,\n        interestRateMode,\n        referralCode,\n      });\n    }\n    const { decimalsOf }: IERC20ServiceInterface = this.erc20Service;\n    const reserveDecimals = await decimalsOf(reserve);\n    const formatAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      reserveDecimals\n    );\n\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.borrow(\n          reserve,\n          formatAmount,\n          numericRateMode,\n          referralCode || 0,\n          onBehalfOf || user\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async repay(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    { user, reserve, amount, interestRateMode, onBehalfOf }: LPRepayParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return this.wethGatewayService.repayETH({\n        lendingPool: this.lendingPoolAddress,\n        user,\n        amount,\n        interestRateMode,\n        onBehalfOf,\n      });\n    }\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const {\n      isApproved,\n      approve,\n      decimalsOf,\n    }: IERC20ServiceInterface = this.erc20Service;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n    const { populateTransaction }: ILendingPool = lendingPoolContract;\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n    const decimals: number = await decimalsOf(reserve);\n\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, decimals);\n\n    if (amount !== '-1') {\n      const fundsAvailable: boolean = await this.synthetixService.synthetixValidation(\n        user,\n        reserve,\n        convertedAmount\n      );\n      if (!fundsAvailable) {\n        throw new Error('Not enough funds to execute operation');\n      }\n    }\n\n    const approved: boolean = await isApproved(\n      reserve,\n      user,\n      this.lendingPoolAddress,\n      amount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        reserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        populateTransaction.repay(\n          reserve,\n          convertedAmount,\n          numericRateMode,\n          onBehalfOf || user\n        ),\n      from: user,\n      value: getTxValue(reserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.repay\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async swapBorrowRateMode(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    { user, reserve, interestRateMode }: LPSwapBorrowRateMode\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.swapBorrowRateMode(\n          reserve,\n          numericRateMode\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        txType: eEthereumTxType.DLP_ACTION,\n        tx: txCallback,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async setUsageAsCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    { user, reserve, usageAsCollateral }: LPSetUsageAsCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.setUserUseReserveAsCollateral(\n          reserve,\n          usageAsCollateral\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async liquidationCall(\n    @IsEthAddress('liquidator')\n    @IsEthAddress('liquidatedUser')\n    @IsEthAddress('debtReserve')\n    @IsEthAddress('collateralReserve')\n    @IsPositiveAmount('purchaseAmount')\n    {\n      liquidator,\n      liquidatedUser,\n      debtReserve,\n      collateralReserve,\n      purchaseAmount,\n      getAToken,\n      liquidateAll,\n    }: LPLiquidationCall\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const {\n      isApproved,\n      approve,\n      getTokenData,\n    }: IERC20ServiceInterface = this.erc20Service;\n\n    const approved = await isApproved(\n      debtReserve,\n      liquidator,\n      this.lendingPoolAddress,\n      purchaseAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        liquidator,\n        debtReserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n\n      txs.push(approveTx);\n    }\n\n    const [debtReserveInfo]: TokenMetadataType[] = await Promise.all([\n      getTokenData(debtReserve),\n    ]);\n\n    const reserveDecimals: number = debtReserveInfo.decimals;\n\n    const convertedAmount: tStringDecimalUnits = liquidateAll\n      ? MAX_UINT_AMOUNT\n      : parseNumber(purchaseAmount, reserveDecimals);\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.liquidationCall(\n          collateralReserve,\n          debtReserve,\n          liquidatedUser,\n          convertedAmount,\n          getAToken || false\n        ),\n      from: liquidator,\n      value: getTxValue(debtReserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.liquidationCall\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async swapCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('fromAsset')\n    @IsEthAddress('fromAToken')\n    @IsEthAddress('toAsset')\n    @IsEthAddress('onBehalfOf')\n    @IsEthAddress('augustus')\n    @IsPositiveAmount('fromAmount')\n    @IsPositiveAmount('minToAmount')\n    {\n      user,\n      flash,\n      fromAsset,\n      fromAToken,\n      toAsset,\n      fromAmount,\n      minToAmount,\n      permitSignature,\n      swapAll,\n      onBehalfOf,\n      referralCode,\n      augustus,\n      swapCallData,\n    }: LPSwapCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const permitParams = permitSignature || {\n      amount: '0',\n      deadline: '0',\n      v: 0,\n      r: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      s: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    };\n\n    const { SWAP_COLLATERAL_ADAPTER } = commonContractAddressBetweenMarketsV2[\n      this.config.network\n    ];\n\n    const approved: boolean = await this.erc20Service.isApproved(\n      fromAToken,\n      user,\n      SWAP_COLLATERAL_ADAPTER,\n      fromAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = this.erc20Service.approve(\n        user,\n        fromAToken,\n        SWAP_COLLATERAL_ADAPTER,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveTx);\n    }\n\n    const tokenDecimals: number = await this.erc20Service.decimalsOf(fromAsset);\n\n    const convertedAmount: string = parseNumber(fromAmount, tokenDecimals);\n\n    const tokenToDecimals: number = await this.erc20Service.decimalsOf(toAsset);\n\n    const amountSlippageConverted: string = parseNumber(\n      minToAmount,\n      tokenToDecimals\n    );\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const params = buildParaSwapLiquiditySwapParams(\n      toAsset,\n      amountSlippageConverted,\n      swapAll\n        ? augustusFromAmountOffsetFromCalldata(swapCallData as string)\n        : 0,\n      swapCallData,\n      augustus,\n      permitParams.amount,\n      permitParams.deadline,\n      permitParams.v,\n      permitParams.r,\n      permitParams.s\n    );\n\n    if (flash) {\n      const amountWithSurplus: string = (\n        Number(fromAmount) +\n        (Number(fromAmount) * Number(SURPLUS)) / 100\n      ).toString();\n\n      const convertedAmountWithSurplus: string = parseNumber(\n        amountWithSurplus,\n        tokenDecimals\n      );\n\n      const txCallback: () => Promise<transactionType> = this.generateTxCallback(\n        {\n          rawTxMethod: () =>\n            lendingPoolContract.populateTransaction.flashLoan(\n              SWAP_COLLATERAL_ADAPTER,\n              [fromAsset],\n              swapAll ? [convertedAmountWithSurplus] : [convertedAmount],\n              [0], // interest rate mode to NONE for flashloan to not open debt\n              onBehalfOf || user,\n              params,\n              referralCode || '0'\n            ),\n          from: user,\n        }\n      );\n\n      txs.push({\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          txs,\n          txCallback,\n          ProtocolAction.swapCollateral\n        ),\n      });\n      return txs;\n    }\n\n    // Direct call to swap and deposit\n    const swapAndDepositTx: EthereumTransactionTypeExtended = await this.liquiditySwapAdapterService.swapAndDeposit(\n      {\n        user,\n        assetToSwapFrom: fromAsset,\n        assetToSwapTo: toAsset,\n        amountToSwap: convertedAmount,\n        minAmountToReceive: amountSlippageConverted,\n        swapAll,\n        swapCallData,\n        augustus,\n        permitParams,\n      }\n    );\n\n    txs.push(swapAndDepositTx);\n    return txs;\n  }\n\n  @LPValidator\n  public async repayWithCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('fromAsset')\n    @IsEthAddress('fromAToken')\n    @IsEthAddress('assetToRepay')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('repayWithAmount')\n    @IsPositiveAmount('repayAmount')\n    {\n      user,\n      fromAsset,\n      fromAToken,\n      assetToRepay,\n      repayWithAmount,\n      repayAmount,\n      permitSignature,\n      repayAllDebt,\n      rateMode,\n      onBehalfOf,\n      referralCode,\n      flash,\n      useEthPath,\n    }: LPRepayWithCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const permitParams = permitSignature || {\n      amount: '0',\n      deadline: '0',\n      v: 0,\n      r: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      s: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    };\n\n    const {\n      REPAY_WITH_COLLATERAL_ADAPTER,\n    } = commonContractAddressBetweenMarketsV2[this.config.network];\n\n    const approved: boolean = await this.erc20Service.isApproved(\n      fromAToken,\n      user,\n      REPAY_WITH_COLLATERAL_ADAPTER,\n      repayWithAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = this.erc20Service.approve(\n        user,\n        fromAToken,\n        REPAY_WITH_COLLATERAL_ADAPTER,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveTx);\n    }\n\n    const fromDecimals: number = await this.erc20Service.decimalsOf(fromAsset);\n    const convertedRepayWithAmount: string = parseNumber(\n      repayWithAmount,\n      fromDecimals\n    );\n\n    const repayAmountWithSurplus: string = (\n      Number(repayAmount) +\n      (Number(repayAmount) * Number(SURPLUS)) / 100\n    ).toString();\n\n    const decimals: number = await this.erc20Service.decimalsOf(assetToRepay);\n    const convertedRepayAmount: string = repayAllDebt\n      ? parseNumber(repayAmountWithSurplus, decimals)\n      : parseNumber(repayAmount, decimals);\n\n    let numericInterestRate = 0;\n    if (rateMode) {\n      numericInterestRate = rateMode === InterestRate.Stable ? 1 : 2;\n    }\n\n    if (flash) {\n      const params: string = utils.defaultAbiCoder.encode(\n        [\n          'address',\n          'uint256',\n          'uint256',\n          'uint256',\n          'uint256',\n          'uint8',\n          'bytes32',\n          'bytes32',\n          'bool',\n        ],\n        [\n          fromAsset,\n          convertedRepayWithAmount,\n          numericInterestRate,\n          permitParams.amount,\n          permitParams.deadline,\n          permitParams.v,\n          permitParams.r,\n          permitParams.s,\n          useEthPath || false,\n        ]\n      );\n\n      const lendingPoolContract = this.getContractInstance(\n        this.lendingPoolAddress\n      );\n\n      const txCallback: () => Promise<transactionType> = this.generateTxCallback(\n        {\n          rawTxMethod: () =>\n            lendingPoolContract.populateTransaction.flashLoan(\n              REPAY_WITH_COLLATERAL_ADAPTER,\n              [assetToRepay],\n              [convertedRepayAmount],\n              [0], // interest rate mode to NONE for flashloan to not open debt\n              onBehalfOf || user,\n              params,\n              referralCode || '0'\n            ),\n          from: user,\n        }\n      );\n\n      txs.push({\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          txs,\n          txCallback,\n          ProtocolAction.repayCollateral\n        ),\n      });\n\n      return txs;\n    }\n\n    const swapAndRepayTx: EthereumTransactionTypeExtended = this.repayWithCollateralAdapterService.swapAndRepay(\n      {\n        user,\n        collateralAsset: fromAsset,\n        debtAsset: assetToRepay,\n        collateralAmount: convertedRepayWithAmount,\n        debtRepayAmount: convertedRepayAmount,\n        debtRateMode: numericInterestRate,\n        permit: permitParams,\n        useEthPath,\n      }\n    );\n\n    txs.push(swapAndRepayTx);\n\n    return txs;\n  }\n\n  @LPValidator\n  public async flashLiquidation(\n    @IsEthAddress('user')\n    @IsEthAddress('collateralAsset')\n    @IsEthAddress('borrowedAsset')\n    @IsPositiveAmount('debtTokenCover')\n    @IsEthAddress('initiator')\n    {\n      user,\n      collateralAsset,\n      borrowedAsset,\n      debtTokenCover,\n      liquidateAll,\n      initiator,\n      useEthPath,\n    }: LPFlashLiquidation\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const addSurplus = (amount: string): string => {\n      return (\n        Number(amount) +\n        (Number(amount) * Number(amount)) / 100\n      ).toString();\n    };\n\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const { FLASHLIQUIDATION } = commonContractAddressBetweenMarketsV2[\n      this.config.network\n    ];\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const tokenDecimals: number = await this.erc20Service.decimalsOf(\n      borrowedAsset\n    );\n\n    const convertedDebt = parseNumber(debtTokenCover, tokenDecimals);\n\n    const convertedDebtTokenCover: string = liquidateAll\n      ? constants.MaxUint256.toString()\n      : convertedDebt;\n\n    const flashBorrowAmount = liquidateAll\n      ? parseNumber(addSurplus(debtTokenCover), tokenDecimals)\n      : convertedDebt;\n\n    const params: string = utils.defaultAbiCoder.encode(\n      ['address', 'address', 'address', 'uint256', 'bool'],\n      [\n        collateralAsset,\n        borrowedAsset,\n        user,\n        convertedDebtTokenCover,\n        useEthPath || false,\n      ]\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.flashLoan(\n          FLASHLIQUIDATION,\n          [borrowedAsset],\n          [flashBorrowAmount],\n          [0],\n          initiator,\n          params,\n          '0'\n        ),\n      from: initiator,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.liquidationFlash\n      ),\n    });\n    return txs;\n  }\n}\n","import { BigNumber } from 'ethers';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n  TokenMetadataType,\n} from '../types';\nimport { API_ETH_MOCK_ADDRESS, SUPER_BIG_ALLOWANCE_NUMBER } from '../config';\nimport { IERC20Detailed, IERC20Detailed__factory } from '../contract-types';\nimport BaseService from './BaseService';\nimport { parseNumber } from '../utils/parsings';\n\nexport default class ERC20Service\n  extends BaseService<IERC20Detailed>\n  implements IERC20ServiceInterface {\n  readonly tokenDecimals: { [address: string]: number };\n\n  constructor(config: Configuration) {\n    super(config, IERC20Detailed__factory);\n    this.tokenDecimals = {};\n  }\n\n  public approve = (\n    user: tEthereumAddress,\n    token: tEthereumAddress,\n    spender: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): EthereumTransactionTypeExtended => {\n    const erc20Contract = this.getContractInstance(token);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        erc20Contract.populateTransaction.approve(spender, amount),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.ERC20_APPROVAL,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  };\n\n  public isApproved = async (\n    token: tEthereumAddress,\n    userAddress: tEthereumAddress,\n    spender: tEthereumAddress,\n    amount: tStringCurrencyUnits\n  ): Promise<boolean> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) return true;\n    const decimals = await this.decimalsOf(token);\n    const erc20Contract: IERC20Detailed = this.getContractInstance(token);\n    const allowance: BigNumber = await erc20Contract.allowance(\n      userAddress,\n      spender\n    );\n    const amountBNWithDecimals: BigNumber =\n      amount === '-1'\n        ? BigNumber.from(SUPER_BIG_ALLOWANCE_NUMBER)\n        : BigNumber.from(parseNumber(amount, decimals));\n    return allowance.gte(amountBNWithDecimals);\n  };\n\n  public decimalsOf = async (token: tEthereumAddress): Promise<number> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) return 18;\n    if (!this.tokenDecimals[token]) {\n      const erc20Contract = this.getContractInstance(token);\n      this.tokenDecimals[token] = await erc20Contract.decimals();\n    }\n\n    return this.tokenDecimals[token];\n  };\n\n  public getTokenData = async (\n    token: tEthereumAddress\n  ): Promise<TokenMetadataType> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return {\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18,\n        address: token,\n      };\n    }\n    // Needed because MKR does not return string for symbol and Name\n    if (\n      token.toLowerCase() ===\n      '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'.toLowerCase()\n    ) {\n      return {\n        name: 'Maker',\n        symbol: 'MKR',\n        decimals: 18,\n        address: token,\n      };\n    }\n\n    const {\n      name: nameGetter,\n      symbol: symbolGetter,\n      decimals: decimalsGetter,\n    }: IERC20Detailed = this.getContractInstance(token);\n\n    const [name, symbol, decimals]: [\n      string,\n      string,\n      number\n    ] = await Promise.all([nameGetter(), symbolGetter(), decimalsGetter()]);\n\n    return {\n      name,\n      symbol,\n      decimals,\n      address: token,\n    };\n  };\n}\n","import {\n  commonContractAddressBetweenMarketsV2,\n  DEFAULT_NULL_VALUE_ON_TX,\n  enabledNetworksByService,\n} from '../config';\nimport {\n  IFaucet,\n  IMinter,\n  IFaucet__factory,\n  IMinter__factory,\n} from '../contract-types';\nimport FaucetInterface from '../interfaces/Faucet';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringDecimalUnits,\n} from '../types';\nimport { FaucetParamsType } from '../types/FaucetMethodTypes';\nimport { mintAmountsPerToken } from '../utils/parsings';\nimport { FaucetValidator } from '../validators/methodValidators';\nimport { IsEthAddress } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class FaucetService\n  extends BaseService<IMinter>\n  implements FaucetInterface {\n  readonly faucetAddress: string;\n\n  readonly faucetContract: IFaucet;\n\n  constructor(config: Configuration) {\n    super(config, IMinter__factory);\n\n    const { provider, network } = this.config;\n\n    const { FAUCET } = commonContractAddressBetweenMarketsV2[network];\n    this.faucetAddress = FAUCET;\n\n    if (enabledNetworksByService.faucet.indexOf(network) > -1) {\n      this.faucetContract = IFaucet__factory.connect(\n        this.faucetAddress,\n        provider\n      );\n    }\n  }\n\n  @FaucetValidator\n  public async mint(\n    @IsEthAddress('userAddress')\n    @IsEthAddress('reserve')\n    { userAddress, reserve, tokenSymbol }: FaucetParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const amount: string = mintAmountsPerToken[tokenSymbol];\n    const txValue = await this.getTxValue(reserve, amount);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        this.faucetContract.populateTransaction.mint(reserve, amount),\n      from: userAddress,\n      value: txValue,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.FAUCET_MINT,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  private async getTxValue(\n    token: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): Promise<tStringDecimalUnits> {\n    const minterAddress: string = await this.faucetContract.getMinter(token);\n    const minterContract: IMinter = this.getContractInstance(minterAddress);\n\n    const isEthRequired: boolean = await minterContract.isEthRequired();\n\n    return isEthRequired ? amount : DEFAULT_NULL_VALUE_ON_TX;\n  }\n}\n","import IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  commonContractAddressBetweenMarketsV2,\n  DEFAULT_APPROVE_AMOUNT,\n} from '../config';\nimport {\n  ILendToAaveMigrator,\n  ILendToAaveMigrator__factory,\n} from '../contract-types';\nimport LTAMigratorInterface from '../interfaces/LTAMigrator';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  Network,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport BaseService from './BaseService';\nimport { LTAMigratorValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\n\nexport default class LTAMigratorService\n  extends BaseService<ILendToAaveMigrator>\n  implements LTAMigratorInterface {\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly migratorAddress: string;\n\n  constructor(config: Configuration, erc20Service: IERC20ServiceInterface) {\n    super(config, ILendToAaveMigrator__factory);\n    this.erc20Service = erc20Service;\n    const { network }: Configuration = this.config;\n\n    this.migratorAddress =\n      commonContractAddressBetweenMarketsV2[network].LEND_TO_AAVE_MIGRATOR;\n  }\n\n  @LTAMigratorValidator\n  public async migrateLendToAave(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    // TODO: delete conditional when mainnet address\n    if (this.config.network === Network.ropsten) {\n      return txs;\n    }\n\n    const { isApproved, approve, decimalsOf } = this.erc20Service;\n\n    const migratorContract: ILendToAaveMigrator = this.getContractInstance(\n      this.migratorAddress\n    );\n    const lendToken: string = await migratorContract.LEND();\n\n    const approved: boolean = await isApproved(\n      lendToken,\n      user,\n      this.migratorAddress,\n      amount\n    );\n\n    if (!approved) {\n      txs.push(\n        approve(user, lendToken, this.migratorAddress, DEFAULT_APPROVE_AMOUNT)\n      );\n    }\n\n    const decimals: number = await decimalsOf(lendToken);\n    const convertedAmount: string = await parseNumber(amount, decimals);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        migratorContract.populateTransaction.migrateFromLEND(convertedAmount),\n      from: user,\n    });\n\n    txs.push({\n      txType: eEthereumTxType.MIGRATION_LEND_AAVE,\n      tx: txCallback,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n}\n","import { constants, utils, Signature } from 'ethers';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  DEFAULT_APPROVE_AMOUNT,\n  distinctStakingAddressesBetweenTokens,\n  MAX_UINT_AMOUNT,\n} from '../config';\nimport {\n  IStakedToken,\n  IAaveStakingHelper,\n  IAaveStakingHelper__factory,\n  IStakedToken__factory,\n} from '../contract-types';\nimport StakingInterface from '../interfaces/Staking';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  Stake,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport { StakingValidator } from '../validators/methodValidators';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n  Optional,\n} from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class StakingService\n  extends BaseService<IStakedToken>\n  implements StakingInterface {\n  readonly stakingHelperContract: IAaveStakingHelper;\n\n  public readonly stakingContractAddress: tEthereumAddress;\n\n  public readonly stakingRewardTokenContractAddress: tEthereumAddress;\n\n  readonly stakingHelperContractAddress: string;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly tokenStake: Stake;\n\n  readonly canUsePermit: boolean;\n\n  constructor(\n    config: Configuration,\n    erc20Service: IERC20ServiceInterface,\n    tokenStake: Stake\n  ) {\n    super(config, IStakedToken__factory);\n    this.tokenStake = tokenStake;\n    this.erc20Service = erc20Service;\n\n    const { provider, network } = this.config;\n\n    const {\n      TOKEN_STAKING_ADDRESS,\n      STAKING_REWARD_TOKEN_ADDRESS,\n      STAKING_HELPER_ADDRESS,\n      canUsePermit,\n    } = distinctStakingAddressesBetweenTokens[this.tokenStake][network];\n\n    this.stakingContractAddress = TOKEN_STAKING_ADDRESS;\n    this.stakingRewardTokenContractAddress = STAKING_REWARD_TOKEN_ADDRESS;\n    this.stakingHelperContractAddress = STAKING_HELPER_ADDRESS;\n    this.canUsePermit = canUsePermit;\n\n    if (this.canUsePermit) {\n      this.stakingHelperContract = IAaveStakingHelper__factory.connect(\n        STAKING_HELPER_ADDRESS,\n        provider\n      );\n    }\n  }\n\n  @StakingValidator\n  public async signStaking(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    nonce: string\n  ): Promise<string> {\n    if (!this.canUsePermit) return '';\n\n    const { getTokenData } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const { name, decimals } = await getTokenData(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, decimals);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        Permit: [\n          { name: 'owner', type: 'address' },\n          { name: 'spender', type: 'address' },\n          { name: 'value', type: 'uint256' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'deadline', type: 'uint256' },\n        ],\n      },\n      primaryType: 'Permit' as const,\n      domain: {\n        name,\n        version: '1',\n        chainId: ChainId[this.config.network],\n        verifyingContract: stakedToken,\n      },\n      message: {\n        owner: user,\n        spender: this.stakingHelperContractAddress,\n        value: convertedAmount,\n        nonce,\n        deadline: constants.MaxUint256.toString(),\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @StakingValidator\n  public async stakeWithPermit(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    signature: string\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (!this.canUsePermit) return [];\n\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { decimalsOf } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      stakedTokenDecimals\n    );\n    const sig: Signature = utils.splitSignature(signature);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        this.stakingHelperContract.populateTransaction.stake(\n          user,\n          convertedAmount,\n          sig.v,\n          sig.r,\n          sig.s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.STAKE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @StakingValidator\n  public async stake(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    @Optional @IsEthAddress() onBehalfOf?: tEthereumAddress\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { decimalsOf, isApproved, approve } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      stakedTokenDecimals\n    );\n    const approved: boolean = await isApproved(\n      stakedToken,\n      user,\n      this.stakingContractAddress,\n      amount\n    );\n    if (!approved) {\n      const approveTx = approve(\n        user,\n        stakedToken,\n        this.stakingContractAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.stake(\n          onBehalfOf || user,\n          convertedAmount\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.STAKE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @StakingValidator\n  public async redeem(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveOrMinusOneAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    let convertedAmount: tStringDecimalUnits;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    if (amount === '-1') {\n      convertedAmount = MAX_UINT_AMOUNT;\n    } else {\n      const { decimalsOf } = this.erc20Service;\n\n      const stakedToken: string = await stakingContract.STAKED_TOKEN();\n      const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n      convertedAmount = parseNumber(amount, stakedTokenDecimals);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.redeem(user, convertedAmount),\n      from: user,\n      gasSurplus: 20,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @StakingValidator\n  public async cooldown(\n    @IsEthAddress() user: tEthereumAddress\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => stakingContract.populateTransaction.cooldown(),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @StakingValidator\n  public async claimRewards(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveOrMinusOneAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    let convertedAmount: tStringDecimalUnits;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    if (amount === '-1') {\n      convertedAmount = MAX_UINT_AMOUNT;\n    } else {\n      const { decimalsOf } = this.erc20Service;\n      const stakedToken: string = await stakingContract.REWARD_TOKEN();\n      const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n      convertedAmount = parseNumber(amount, stakedTokenDecimals);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.claimRewards(user, convertedAmount),\n      from: user,\n      gasSurplus: 20,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { BigNumber } from 'ethers';\nimport BaseService from './BaseService';\nimport { Configuration, tStringDecimalUnits } from '../types';\nimport { ISynthetix, ISynthetix__factory } from '../contract-types';\nimport SynthetixInterface from '../interfaces/Synthetix';\nimport { commonContractAddressBetweenMarketsV2 } from '../config';\n\nexport default class SynthetixService\n  extends BaseService<ISynthetix>\n  implements SynthetixInterface {\n  constructor(config: Configuration) {\n    super(config, ISynthetix__factory);\n  }\n\n  public synthetixValidation = async (\n    userAddress: string,\n    reserve: string,\n    amount: tStringDecimalUnits\n  ): Promise<boolean> => {\n    const synthAddress =\n      commonContractAddressBetweenMarketsV2[this.config.network]\n        .SYNTHETIX_PROXY_ADDRESS;\n\n    if (reserve.toUpperCase() === synthAddress.toUpperCase()) {\n      return this.isSnxTransferable(userAddress, amount);\n    }\n    return true;\n  };\n\n  readonly isSnxTransferable = async (\n    userAddress: string,\n    amount: tStringDecimalUnits\n  ): Promise<boolean> => {\n    const synthContract = this.getContractInstance(\n      commonContractAddressBetweenMarketsV2[this.config.network]\n        .SYNTHETIX_PROXY_ADDRESS\n    );\n\n    const transferableAmount: BigNumber = await synthContract.transferableSynthetix(\n      userAddress\n    );\n    return BigNumber.from(amount).lte(transferableAmount);\n  };\n}\n","import { constants } from 'ethers';\nimport { commonContractAddressBetweenMarketsV2 } from '../config';\nimport {\n  IAaveIncentivesController,\n  IAaveIncentivesController__factory,\n} from '../contract-types';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n} from '../types';\nimport { IncentivesValidator } from '../validators/methodValidators';\nimport { IsEthAddress } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport type ClaimRewardsMethodType = {\n  user: string;\n  assets: string[];\n  to: string;\n};\n\nexport interface IncentivesControllerInterface {\n  incentivesControllerRewardTokenAddress: tEthereumAddress;\n  claimRewards: (\n    args: ClaimRewardsMethodType\n  ) => EthereumTransactionTypeExtended[];\n}\n\nexport default class IncentivesController\n  extends BaseService<IAaveIncentivesController>\n  implements IncentivesControllerInterface {\n  public readonly incentivesControllerRewardTokenAddress: tEthereumAddress;\n  readonly incentivesControllerAddress: string;\n\n  constructor(config: Configuration) {\n    super(config, IAaveIncentivesController__factory);\n    const { network } = this.config;\n    const addresses = commonContractAddressBetweenMarketsV2[network];\n    this.incentivesControllerAddress = addresses.INCENTIVES_CONTROLLER;\n    this.incentivesControllerRewardTokenAddress =\n      addresses.INCENTIVES_CONTROLLER_REWARD_TOKEN;\n  }\n\n  @IncentivesValidator\n  public claimRewards(\n    @IsEthAddress('user')\n    // @IsEthAddressArray('assets')\n    @IsEthAddress('to')\n    { user, assets, to }: ClaimRewardsMethodType\n  ): EthereumTransactionTypeExtended[] {\n    const incentivesContract: IAaveIncentivesController = this.getContractInstance(\n      this.incentivesControllerAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        incentivesContract.populateTransaction.claimRewards(\n          assets,\n          constants.MaxUint256.toString(),\n          to || user\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.REWARD_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { ethers, providers } from 'ethers';\nimport FaucetInterface from './interfaces/Faucet';\nimport IERC20ServiceInterface from './interfaces/ERC20';\nimport LTAMigratorInterface from './interfaces/LTAMigrator';\nimport StakingInterface from './interfaces/Staking';\nimport SynthetixInterface from './interfaces/Synthetix';\nimport ERC20Service from './services/ERC20';\nimport FaucetService from './services/Faucet';\nimport LTAMigratorService from './services/LTAMigrator';\nimport StakingService from './services/Staking';\nimport SynthetixService from './services/SynthetixService';\nimport {\n  ChainId,\n  Configuration,\n  DefaultProviderKeys,\n  Network,\n  Stake,\n} from './types';\nimport IncentivesController, {\n  IncentivesControllerInterface,\n} from './services/IncentivesController';\n\nexport default class BaseTxBuilder {\n  readonly configuration: Configuration;\n\n  public erc20Service: IERC20ServiceInterface;\n\n  public synthetixService: SynthetixInterface;\n\n  public ltaMigratorService: LTAMigratorInterface;\n\n  public faucetService: FaucetInterface;\n\n  public incentiveService: IncentivesControllerInterface;\n\n  readonly stakings: { [stake: string]: StakingInterface };\n\n  constructor(\n    network: Network = Network.mainnet,\n    injectedProvider?:\n      | providers.ExternalProvider\n      | providers.Web3Provider\n      | string\n      | undefined,\n    defaultProviderKeys?: DefaultProviderKeys\n  ) {\n    let provider:\n      | providers.JsonRpcProvider\n      | providers.BaseProvider\n      | providers.Web3Provider;\n\n    // TODO: this is probably not enough as we use network down the road\n    const chainId = ChainId[network];\n\n    if (!injectedProvider) {\n      if (defaultProviderKeys && Object.keys(defaultProviderKeys).length > 1) {\n        provider = ethers.getDefaultProvider(network, defaultProviderKeys);\n      } else {\n        provider = ethers.getDefaultProvider(network);\n        console.log(\n          `These API keys are a provided as a community resource by the backend services for low-traffic projects and for early prototyping.\n          It is highly recommended to use own keys: https://docs.ethers.io/v5/api-keys/`\n        );\n      }\n    } else if (typeof injectedProvider === 'string') {\n      provider = new providers.JsonRpcProvider(injectedProvider, chainId);\n    } else if (injectedProvider instanceof providers.Web3Provider) {\n      provider = injectedProvider;\n    } else {\n      provider = new providers.Web3Provider(injectedProvider, chainId);\n    }\n\n    this.configuration = { network, provider };\n\n    this.erc20Service = new ERC20Service(this.configuration);\n    this.synthetixService = new SynthetixService(this.configuration);\n    this.ltaMigratorService = new LTAMigratorService(\n      this.configuration,\n      this.erc20Service\n    );\n    this.faucetService = new FaucetService(this.configuration);\n    this.incentiveService = new IncentivesController(this.configuration);\n\n    this.stakings = {};\n  }\n\n  public getStaking = (stake?: Stake): StakingInterface => {\n    const stakeToken = stake || Stake.Aave;\n    if (!this.stakings[stakeToken]) {\n      this.stakings[stakeToken] = new StakingService(\n        this.configuration,\n        this.erc20Service,\n        stakeToken\n      );\n    }\n\n    return this.stakings[stakeToken];\n  };\n}\n","import { constants } from 'ethers';\nimport { commonContractAddressBetweenMarketsV2 } from '../config';\nimport { IWETHGateway, IWETHGateway__factory } from '../contract-types';\nimport BaseDebtTokenInterface from '../interfaces/BaseDebtToken';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport WETHGatewayInterface from '../interfaces/WETHGateway';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  InterestRate,\n  ProtocolAction,\n  transactionType,\n  tStringDecimalUnits,\n} from '../types';\nimport {\n  WETHBorrowParamsType,\n  WETHDepositParamsType,\n  WETHRepayParamsType,\n  WETHWithdrawParamsType,\n} from '../types/WethGatewayMethodTypes';\nimport { parseNumber } from '../utils/parsings';\nimport { WETHValidator } from '../validators/methodValidators';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n} from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class WETHGatewayService\n  extends BaseService<IWETHGateway>\n  implements WETHGatewayInterface {\n  readonly wethGatewayAddress: string;\n\n  readonly config: Configuration;\n\n  readonly baseDebtTokenService: BaseDebtTokenInterface;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  constructor(\n    config: Configuration,\n    baseDebtTokenService: BaseDebtTokenInterface,\n    erc20Service: IERC20ServiceInterface\n  ) {\n    super(config, IWETHGateway__factory);\n    this.config = config;\n    this.baseDebtTokenService = baseDebtTokenService;\n    this.erc20Service = erc20Service;\n\n    const { network } = this.config;\n    const { WETH_GATEWAY } = commonContractAddressBetweenMarketsV2[network];\n\n    this.wethGatewayAddress = WETH_GATEWAY;\n  }\n\n  @WETHValidator\n  public async depositETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('amount')\n    {\n      lendingPool,\n      user,\n      amount,\n      onBehalfOf,\n      referralCode,\n    }: WETHDepositParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.depositETH(\n          lendingPool,\n          onBehalfOf || user,\n          referralCode || '0'\n        ),\n      from: user,\n      value: convertedAmount,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @WETHValidator\n  public async borrowETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('debtTokenAddress')\n    {\n      lendingPool,\n      user,\n      amount,\n      debtTokenAddress,\n      interestRateMode,\n      referralCode,\n    }: WETHBorrowParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const delegationApproved: boolean = await this.baseDebtTokenService.isDelegationApproved(\n      debtTokenAddress,\n      user,\n      this.wethGatewayAddress,\n      amount\n    );\n\n    if (!delegationApproved) {\n      const approveDelegationTx: EthereumTransactionTypeExtended = this.baseDebtTokenService.approveDelegation(\n        user,\n        this.wethGatewayAddress,\n        debtTokenAddress,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveDelegationTx);\n    }\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.borrowETH(\n          lendingPool,\n          convertedAmount,\n          numericRateMode,\n          referralCode || '0'\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.borrowETH\n      ),\n    });\n\n    return txs;\n  }\n\n  @WETHValidator\n  public async withdrawETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('aTokenAddress')\n    {\n      lendingPool,\n      user,\n      amount,\n      onBehalfOf,\n      aTokenAddress,\n    }: WETHWithdrawParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { isApproved, approve }: IERC20ServiceInterface = this.erc20Service;\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, 18);\n\n    const approved: boolean = await isApproved(\n      aTokenAddress,\n      user,\n      this.wethGatewayAddress,\n      amount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        aTokenAddress,\n        this.wethGatewayAddress,\n        constants.MaxUint256.toString()\n      );\n      txs.push(approveTx);\n    }\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.withdrawETH(\n          lendingPool,\n          convertedAmount,\n          onBehalfOf || user\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.withdrawETH\n      ),\n    });\n\n    return txs;\n  }\n\n  @WETHValidator\n  public async repayETH(\n    @IsEthAddress('lendingPool')\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('amount')\n    {\n      lendingPool,\n      user,\n      amount,\n      interestRateMode,\n      onBehalfOf,\n    }: WETHRepayParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.repayETH(\n          lendingPool,\n          convertedAmount,\n          numericRateMode,\n          onBehalfOf || user\n        ),\n      gasSurplus: 30,\n      from: user,\n      value: convertedAmount,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { BytesLike } from 'ethers';\nimport { tEthereumAddress } from '.';\n\nexport enum ExecutorType {\n  Short,\n  Long,\n}\n\nexport type GovCreateType = {\n  user: tEthereumAddress;\n  targets: tEthereumAddress[];\n  values: string[];\n  signatures: string[];\n  calldatas: BytesLike[];\n  withDelegateCalls: boolean[];\n  ipfsHash: BytesLike;\n  executor: ExecutorType;\n};\nexport type GovCancelType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovQueueType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovExecuteType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovSubmitVoteType = {\n  user: tEthereumAddress;\n  proposalId: number;\n  support: boolean;\n};\nexport type GovSubmitVoteSignType = {\n  user: tEthereumAddress;\n  proposalId: number;\n  support: boolean;\n  signature: string;\n};\n\nexport type GovSignVotingType = {\n  user: tEthereumAddress;\n  support: boolean;\n  proposalId: number;\n  nonce: number;\n};\n\nexport type GovGetProposalsType = {\n  skip: number;\n  limit: number;\n};\n\nexport type GovGetProposalType = {\n  proposalId: number;\n};\n\nexport type GovGetVotingSupplyType = {\n  block: number;\n  strategy: tEthereumAddress;\n};\n\nexport type GovGetVotingAtBlockType = {\n  user: tEthereumAddress;\n  strategy: tEthereumAddress;\n  block: number;\n};\n\nexport type GovGetTokensVotingPower = {\n  user: tEthereumAddress;\n  tokens: tEthereumAddress[];\n};\n\nexport type GovGetVoteOnProposal = {\n  proposalId: string;\n  user: tEthereumAddress;\n};\n","import { BigNumber } from 'ethers';\nimport { tEthereumAddress } from '.';\n\nexport enum ProposalState {\n  Pending = 'Pending',\n  Canceled = 'Canceled',\n  Active = 'Active',\n  Failed = 'Failed',\n  Succeeded = 'Succeeded',\n  Queued = 'Queued',\n  Expired = 'Expired',\n  Executed = 'Executed',\n}\n\nexport type Proposal = {\n  id: number;\n  title: string;\n  description: string;\n  shortDescription: string;\n  creator: tEthereumAddress;\n  executor: tEthereumAddress;\n  targets: tEthereumAddress[];\n  values: BigNumber[];\n  signatures: string[];\n  calldatas: string[];\n  withDelegatecalls: boolean[];\n  startBlock: number;\n  endBlock: number;\n  executionTime: string;\n  executionTimeWithGracePeriod: string;\n  forVotes: string;\n  againstVotes: string;\n  executed: boolean;\n  canceled: boolean;\n  strategy: string;\n  ipfsHash: string;\n  state: ProposalState;\n  minimumQuorum: string;\n  minimumDiff: string;\n  proposalCreated: number;\n  totalVotingSupply: string;\n};\n\nexport type ProposalRPC = {\n  totalVotingSupply: BigNumber;\n  minimumQuorum: BigNumber;\n  minimumDiff: BigNumber;\n  executionTimeWithGracePeriod: BigNumber;\n  proposalCreated: BigNumber;\n  id: BigNumber;\n  creator: string;\n  executor: string;\n  targets: string[];\n  values: BigNumber[];\n  signatures: string[];\n  calldatas: string[];\n  withDelegatecalls: boolean[];\n  startBlock: BigNumber;\n  endBlock: BigNumber;\n  executionTime: BigNumber;\n  forVotes: BigNumber;\n  againstVotes: BigNumber;\n  executed: boolean;\n  canceled: boolean;\n  strategy: string;\n  ipfsHash: string;\n  proposalState: number;\n};\n\nexport type ProposalMetadata = {\n  title: string;\n  description: string;\n  shortDescription: string;\n  ipfsHash: string;\n};\n\nexport type Power = {\n  votingPower: BigNumber;\n  delegatedAddressVotingPower: string;\n  propositionPower: BigNumber;\n  delegatedAddressPropositionPower: string;\n};\n\nexport type Vote = { support: boolean; votingPower: BigNumber };\n","import { BigNumber } from 'ethers';\nimport { IDebtTokenBase, IDebtTokenBase__factory } from '../contract-types';\nimport BaseDebtTokenInterface from '../interfaces/BaseDebtToken';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport BaseService from './BaseService';\n\nexport default class BaseDebtToken\n  extends BaseService<IDebtTokenBase>\n  implements BaseDebtTokenInterface {\n  readonly erc20Service: IERC20ServiceInterface;\n\n  constructor(config: Configuration, erc20Service: IERC20ServiceInterface) {\n    super(config, IDebtTokenBase__factory);\n    this.erc20Service = erc20Service;\n  }\n\n  public approveDelegation(\n    user: tEthereumAddress,\n    delegatee: tEthereumAddress,\n    debtTokenAddress: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): EthereumTransactionTypeExtended {\n    const debtTokenContract: IDebtTokenBase = this.getContractInstance(\n      debtTokenAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        debtTokenContract.populateTransaction.approveDelegation(\n          delegatee,\n          amount\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.ERC20_APPROVAL,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  }\n\n  public async isDelegationApproved(\n    debtTokenAddress: tEthereumAddress,\n    allowanceGiver: tEthereumAddress,\n    allowanceReceiver: tEthereumAddress,\n    amount: tStringCurrencyUnits\n  ): Promise<boolean> {\n    const decimals: number = await this.erc20Service.decimalsOf(\n      debtTokenAddress\n    );\n    const debtTokenContract: IDebtTokenBase = this.getContractInstance(\n      debtTokenAddress\n    );\n    const delegatedAllowance: BigNumber = await debtTokenContract.borrowAllowance(\n      allowanceGiver,\n      allowanceReceiver\n    );\n    const amountBNWithDecimals: BigNumber = BigNumber.from(\n      parseNumber(amount, decimals)\n    );\n\n    return delegatedAllowance.gt(amountBNWithDecimals);\n  }\n}\n","import { commonContractAddressBetweenMarketsV2 } from '../config';\nimport {\n  IRepayWithCollateral,\n  IRepayWithCollateral__factory,\n} from '../contract-types';\nimport RepayWithCollateralAdapterInterface from '../interfaces/RepayWithCollateralAdapter';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  transactionType,\n} from '../types';\nimport { RepayWithCollateralType } from '../types/RepayWithCollateralMethodTypes';\nimport { RepayWithCollateralValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class RepayWithCollateralAdapterService\n  extends BaseService<IRepayWithCollateral>\n  implements RepayWithCollateralAdapterInterface {\n  readonly repayWithCollateralAddress: string;\n\n  constructor(config: Configuration) {\n    super(config, IRepayWithCollateral__factory);\n\n    const {\n      REPAY_WITH_COLLATERAL_ADAPTER,\n    } = commonContractAddressBetweenMarketsV2[this.config.network];\n\n    this.repayWithCollateralAddress = REPAY_WITH_COLLATERAL_ADAPTER;\n  }\n\n  @RepayWithCollateralValidator\n  public swapAndRepay(\n    @IsEthAddress('user')\n    @IsEthAddress('collateralAsset')\n    @IsEthAddress('debtAsset')\n    @IsPositiveAmount('collateralAmount')\n    @IsPositiveAmount('debtRepayAmount')\n    {\n      user,\n      collateralAsset,\n      debtAsset,\n      collateralAmount,\n      debtRepayAmount,\n      debtRateMode,\n      permit,\n      useEthPath,\n    }: RepayWithCollateralType\n  ): EthereumTransactionTypeExtended {\n    const repayWithCollateralContract: IRepayWithCollateral = this.getContractInstance(\n      this.repayWithCollateralAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        repayWithCollateralContract.populateTransaction.swapAndRepay(\n          collateralAsset,\n          debtAsset,\n          collateralAmount,\n          debtRepayAmount,\n          debtRateMode,\n          permit,\n          useEthPath || false\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  }\n}\n","import axios from 'axios';\nimport { base58 } from 'ethers/lib/utils';\nimport { ProposalMetadata } from '../types/GovernanceV2ReturnTypes';\n\nconst ipfsEndpoint = 'https://cloudflare-ipfs.com/ipfs';\n\nexport function getLink(hash: string): string {\n  return `${ipfsEndpoint}/${hash}`;\n}\n\ninterface MemorizeMetadata {\n  [key: string]: ProposalMetadata;\n}\n\nconst MEMORIZE: MemorizeMetadata = {};\n\nexport async function getProposalMetadata(\n  hash: string\n): Promise<ProposalMetadata> {\n  const ipfsHash = base58.encode(Buffer.from(`1220${hash.slice(2)}`, 'hex'));\n  if (MEMORIZE[ipfsHash]) return MEMORIZE[ipfsHash];\n  try {\n    const { data } = await axios.get(getLink(ipfsHash), { timeout: 2000 });\n\n    if (!data?.title) {\n      throw Error('Missing title field at proposal metadata.');\n    }\n    if (!data?.description) {\n      throw Error('Missing description field at proposal metadata.');\n    }\n    if (!data?.shortDescription) {\n      throw Error('Missing shortDescription field at proposal metadata.');\n    }\n\n    MEMORIZE[ipfsHash] = {\n      ipfsHash,\n      title: data.title,\n      description: data.description,\n      shortDescription: data.shortDescription,\n    };\n    return MEMORIZE[ipfsHash];\n  } catch (e) {\n    console.error(`@aave/protocol-js: IPFS fetch Error: ${e.message}`);\n    return {\n      ipfsHash,\n      title: `Proposal - ${ipfsHash}`,\n      description: `Proposal with invalid metadata format or IPFS gateway is down`,\n      shortDescription: `Proposal with invalid metadata format or IPFS gateway is down`,\n    };\n  }\n}\n","import { Signature, utils } from 'ethers';\nimport { formatEther } from 'ethers/lib/utils';\nimport { aaveGovernanceV2Addresses } from '../../config';\nimport {\n  IGovernanceStrategy,\n  IGovernanceStrategy__factory,\n  IGovernanceV2Helper,\n  IGovernanceV2Helper__factory,\n} from '../../contract-types';\nimport { IAaveGovernanceV2__factory } from '../../contract-types/factories/IAaveGovernanceV2__factory';\nimport { IAaveGovernanceV2 } from '../../contract-types/IAaveGovernanceV2';\nimport AaveGovernanceV2Interface from '../../interfaces/v2/AaveGovernanceV2';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n} from '../../types';\nimport {\n  ExecutorType,\n  GovCancelType,\n  GovCreateType,\n  GovExecuteType,\n  GovGetProposalsType,\n  GovGetProposalType,\n  GovGetVotingAtBlockType,\n  GovGetVotingSupplyType,\n  GovQueueType,\n  GovSignVotingType,\n  GovSubmitVoteSignType,\n  GovSubmitVoteType,\n  GovGetTokensVotingPower as GovGetPower,\n  GovGetVoteOnProposal,\n} from '../../types/GovernanceV2MethodTypes';\nimport {\n  Proposal,\n  ProposalState,\n  Power,\n  ProposalRPC,\n  Vote,\n} from '../../types/GovernanceV2ReturnTypes';\nimport { getProposalMetadata } from '../../utils/ipfs';\nimport { GovValidator } from '../../validators/methodValidators';\nimport {\n  Is0OrPositiveAmount,\n  IsEthAddress,\n} from '../../validators/paramValidators';\nimport BaseService from '../BaseService';\n\nconst parseProposal = async (rawProposal: ProposalRPC): Promise<Proposal> => {\n  const {\n    id,\n    creator,\n    executor,\n    targets,\n    values,\n    signatures,\n    calldatas,\n    withDelegatecalls,\n    startBlock,\n    endBlock,\n    executionTime,\n    forVotes,\n    againstVotes,\n    executed,\n    canceled,\n    strategy,\n    ipfsHash: ipfsHex,\n    totalVotingSupply,\n    minimumQuorum,\n    minimumDiff,\n    executionTimeWithGracePeriod,\n    proposalCreated,\n    proposalState,\n  } = rawProposal;\n\n  const proposalMetadata = await getProposalMetadata(ipfsHex);\n  const proposal: Proposal = {\n    id: Number(id.toString()),\n    creator,\n    executor,\n    targets,\n    values,\n    signatures,\n    calldatas,\n    withDelegatecalls,\n    startBlock: Number(startBlock.toString()),\n    endBlock: Number(endBlock.toString()),\n    executionTime: executionTime.toString(),\n    forVotes: forVotes.toString(),\n    againstVotes: againstVotes.toString(),\n    executed,\n    canceled,\n    strategy,\n    ipfsHash: proposalMetadata.ipfsHash,\n    state: Object.values(ProposalState)[proposalState],\n    minimumQuorum: minimumQuorum.toString(),\n    minimumDiff: minimumDiff.toString(),\n    executionTimeWithGracePeriod: executionTimeWithGracePeriod.toString(),\n    title: proposalMetadata.title,\n    description: proposalMetadata.description,\n    shortDescription: proposalMetadata.shortDescription,\n    proposalCreated: Number(proposalCreated.toString()),\n    totalVotingSupply: totalVotingSupply.toString(),\n  };\n\n  return proposal;\n};\nexport default class AaveGovernanceV2Service\n  extends BaseService<IAaveGovernanceV2>\n  implements AaveGovernanceV2Interface {\n  readonly aaveGovernanceV2Address: string;\n\n  readonly aaveGovernanceV2HelperAddress: string;\n\n  readonly executors: tEthereumAddress[] = [];\n\n  constructor(config: Configuration) {\n    super(config, IAaveGovernanceV2__factory);\n\n    const { network } = this.config;\n    const {\n      AAVE_GOVERNANCE_V2,\n      AAVE_GOVERNANCE_V2_HELPER,\n      AAVE_GOVERNANCE_V2_EXECUTOR_SHORT,\n      AAVE_GOVERNANCE_V2_EXECUTOR_LONG,\n    } = aaveGovernanceV2Addresses[network];\n\n    this.aaveGovernanceV2Address = AAVE_GOVERNANCE_V2;\n    this.aaveGovernanceV2HelperAddress = AAVE_GOVERNANCE_V2_HELPER;\n    this.executors[ExecutorType.Short] = AAVE_GOVERNANCE_V2_EXECUTOR_SHORT;\n    this.executors[ExecutorType.Long] = AAVE_GOVERNANCE_V2_EXECUTOR_LONG;\n  }\n\n  @GovValidator\n  public async create(\n    @IsEthAddress('user')\n    {\n      user,\n      targets,\n      values,\n      signatures,\n      calldatas,\n      withDelegateCalls,\n      ipfsHash,\n      executor,\n    }: GovCreateType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.create(\n          this.executors[executor],\n          targets,\n          values,\n          signatures,\n          calldatas,\n          withDelegateCalls,\n          ipfsHash\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async cancel(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovCancelType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.cancel(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async queue(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovQueueType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.queue(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async execute(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovExecuteType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.execute(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async submitVote(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId, support }: GovSubmitVoteType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.submitVote(proposalId, support),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async signVoting(\n    @Is0OrPositiveAmount('proposalId')\n    { support, proposalId }: GovSignVotingType\n  ): Promise<string> {\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        VoteEmitted: [\n          { name: 'id', type: 'uint256' },\n          { name: 'support', type: 'bool' },\n        ],\n      },\n      primaryType: 'VoteEmitted' as const,\n      domain: {\n        name: 'Aave Governance v2',\n        chainId: ChainId[this.config.network],\n        verifyingContract: this.aaveGovernanceV2Address,\n      },\n      message: {\n        support,\n        id: proposalId,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovValidator\n  public async submitVoteBySignature(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId, support, signature }: GovSubmitVoteSignType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const sig: Signature = utils.splitSignature(signature);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.submitVoteBySignature(\n          proposalId,\n          support,\n          sig.v,\n          sig.r,\n          sig.s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async getProposals({\n    skip,\n    limit,\n  }: GovGetProposalsType): Promise<Proposal[]> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n\n    const result = await helper.getProposals(\n      skip.toString(),\n      limit.toString(),\n      this.aaveGovernanceV2Address\n    );\n\n    const proposals: Promise<Proposal[]> = Promise.all(\n      result.map(\n        async (rawProposal: ProposalRPC): Promise<Proposal> =>\n          parseProposal(rawProposal)\n      )\n    );\n\n    return proposals;\n  }\n\n  @GovValidator\n  public async getProposal({\n    proposalId,\n  }: GovGetProposalType): Promise<Proposal> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n\n    const proposal = await helper.getProposal(\n      proposalId,\n      this.aaveGovernanceV2Address\n    );\n\n    return parseProposal(proposal);\n  }\n\n  @GovValidator\n  public async getPropositionPowerAt({\n    user,\n    block,\n    strategy,\n  }: GovGetVotingAtBlockType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const power = await proposalStrategy.getPropositionPowerAt(\n      user,\n      block.toString()\n    );\n    return formatEther(power);\n  }\n\n  @GovValidator\n  public async getVotingPowerAt({\n    user,\n    block,\n    strategy,\n  }: GovGetVotingAtBlockType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const power = await proposalStrategy.getVotingPowerAt(\n      user,\n      block.toString()\n    );\n    return formatEther(power);\n  }\n\n  @GovValidator\n  public async getTotalPropositionSupplyAt({\n    block,\n    strategy,\n  }: GovGetVotingSupplyType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const total = await proposalStrategy.getTotalPropositionSupplyAt(\n      block.toString()\n    );\n    return formatEther(total);\n  }\n\n  @GovValidator\n  public async getTotalVotingSupplyAt({\n    block,\n    strategy,\n  }: GovGetVotingSupplyType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const total = await proposalStrategy.getTotalVotingSupplyAt(\n      block.toString()\n    );\n    return formatEther(total);\n  }\n\n  @GovValidator\n  public async getTokensPower({ user, tokens }: GovGetPower): Promise<Power[]> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n    const power = helper.getTokensPower(user, tokens);\n    return power as Promise<Power[]>;\n  }\n\n  @GovValidator\n  public async getVoteOnProposal({\n    proposalId,\n    user,\n  }: GovGetVoteOnProposal): Promise<Vote> {\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n    return govContract.getVoteOnProposal(proposalId, user) as Promise<Vote>;\n  }\n}\n","import { splitSignature } from 'ethers/lib/utils';\nimport {\n  IGovernancePowerDelegationToken,\n  IGovernancePowerDelegationToken__factory,\n} from '../../contract-types';\nimport GovernanceDelegationTokenInterface from '../../interfaces/v2/GovernanceDelegationToken';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringDecimalUnits,\n} from '../../types';\nimport {\n  GovDelegate,\n  GovDelegateBySig,\n  GovDelegateByType,\n  GovDelegateByTypeBySig,\n  GovGetDelegateeByType,\n  GovGetNonce,\n  GovGetPowerAtBlock,\n  GovGetPowerCurrent,\n  GovPrepareDelegateSig,\n  GovPrepareDelegateSigByType,\n} from '../../types/GovDelegationMethodTypes';\nimport { canBeEnsAddress } from '../../utils/parsings';\nimport { GovDelegationValidator } from '../../validators/methodValidators';\nimport {\n  Is0OrPositiveAmount,\n  IsEthAddress,\n  IsEthAddressOrENS,\n  IsPositiveAmount,\n} from '../../validators/paramValidators';\nimport BaseService from '../BaseService';\n\nexport default class GovernanceDelegationTokenService\n  extends BaseService<IGovernancePowerDelegationToken>\n  implements GovernanceDelegationTokenInterface {\n  constructor(config: Configuration) {\n    super(config, IGovernancePowerDelegationToken__factory);\n  }\n\n  @GovDelegationValidator\n  public async delegate(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, governanceToken }: GovDelegate\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegate(\n          delegateeAddress\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateByType(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, delegationType, governanceToken }: GovDelegateByType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateByType(\n          delegateeAddress,\n          delegationType\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateBySig(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, expiry, signature, governanceToken }: GovDelegateBySig\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    const nonce = await this.getNonce({ user, governanceToken });\n    const { v, r, s } = splitSignature(signature);\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateBySig(\n          delegateeAddress,\n          nonce,\n          expiry,\n          v,\n          r,\n          s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateByTypeBySig(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    {\n      user,\n      delegatee,\n      delegationType,\n      expiry,\n      signature,\n      governanceToken,\n    }: GovDelegateByTypeBySig\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    const nonce = await this.getNonce({ user, governanceToken });\n    const { v, r, s } = splitSignature(signature);\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateByTypeBySig(\n          delegateeAddress,\n          delegationType,\n          nonce,\n          expiry,\n          v,\n          r,\n          s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async prepareDelegateSignature(\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    @Is0OrPositiveAmount('nonce')\n    {\n      delegatee,\n      nonce,\n      expiry,\n      governanceTokenName,\n      governanceToken,\n    }: GovPrepareDelegateSig\n  ): Promise<string> {\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        Delegate: [\n          { name: 'delegatee', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'expiry', type: 'uint256' },\n        ],\n      },\n      primaryType: 'Delegate' as const,\n      domain: {\n        name: governanceTokenName,\n        chainId: ChainId[this.config.network],\n        verifyingContract: governanceToken,\n      },\n      message: {\n        delegatee: delegateeAddress,\n        nonce,\n        expiry,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovDelegationValidator\n  public async prepareDelegateByTypeSignature(\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    @Is0OrPositiveAmount('nonce')\n    {\n      delegatee,\n      type,\n      nonce,\n      expiry,\n      governanceTokenName,\n      governanceToken,\n    }: GovPrepareDelegateSigByType\n  ): Promise<string> {\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        DelegateByType: [\n          { name: 'delegatee', type: 'address' },\n          { name: 'type', type: 'uint256' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'expiry', type: 'uint256' },\n        ],\n      },\n      primaryType: 'DelegateByType' as const,\n      domain: {\n        name: governanceTokenName,\n        chainId: ChainId[this.config.network],\n        verifyingContract: governanceToken,\n      },\n      message: {\n        delegatee: delegateeAddress,\n        type,\n        nonce,\n        expiry,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovDelegationValidator\n  public async getDelegateeByType(\n    @IsEthAddress('delegator')\n    @IsEthAddress('governanceToken')\n    { delegator, delegationType, governanceToken }: GovGetDelegateeByType\n  ): Promise<tEthereumAddress> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return governanceDelegationToken.getDelegateeByType(\n      delegator,\n      delegationType\n    );\n  }\n\n  @GovDelegationValidator\n  public async getPowerCurrent(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    { user, delegationType, governanceToken }: GovGetPowerCurrent\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return (\n      await governanceDelegationToken.getPowerCurrent(user, delegationType)\n    ).toString();\n  }\n\n  @GovDelegationValidator\n  public async getPowerAtBlock(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    @IsPositiveAmount('blockNumber')\n    { user, blockNumber, delegationType, governanceToken }: GovGetPowerAtBlock\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return (\n      await governanceDelegationToken.getPowerAtBlock(\n        user,\n        blockNumber,\n        delegationType\n      )\n    ).toString();\n  }\n\n  @GovDelegationValidator\n  public async getNonce(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    { user, governanceToken }: GovGetNonce\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    // eslint-disable-next-line no-underscore-dangle\n    return (await governanceDelegationToken._nonces(user)).toString();\n  }\n\n  private async getDelegateeAddress(delegatee: string): Promise<string> {\n    if (canBeEnsAddress(delegatee)) {\n      const delegateeAddress = await this.config.provider.resolveName(\n        delegatee\n      );\n      if (!delegateeAddress)\n        throw new Error(`Address ${delegatee} is not a valid ENS address`);\n\n      return delegateeAddress;\n    }\n\n    return delegatee;\n  }\n}\n","import { providers } from 'ethers';\nimport { Network, Market, DefaultProviderKeys } from './types';\nimport TxBuilderInterface from './interfaces/TxBuilder';\nimport LendingPoolInterface from './interfaces/v2/LendingPool';\nimport LendingPool from './services/v2/LendingPool';\nimport BaseTxBuilder from './txBuilder';\nimport WETHGatewayInterface from './interfaces/WETHGateway';\nimport WETHGatewayService from './services/WETHGateway';\nimport BaseDebtTokenInterface from './interfaces/BaseDebtToken';\nimport BaseDebtToken from './services/BaseDebtToken';\nimport LiquiditySwapAdapterService from './services/LiquiditySwapAdapterParaswap';\nimport LiquiditySwapAdapterInterface from './interfaces/LiquiditySwapAdapterParaswap';\nimport RepayWithCollateralAdapterService from './services/RepayWithCollateralAdapter';\nimport RepayWithCollateralAdapterInterface from './interfaces/RepayWithCollateralAdapter';\nimport AaveGovernanceV2Interface from './interfaces/v2/AaveGovernanceV2';\nimport GovernanceDelegationTokenInterface from './interfaces/v2/GovernanceDelegationToken';\nimport AaveGovernanceV2Service from './services/v2/AaveGovernanceV2';\nimport GovernanceDelegationTokenService from './services/v2/GovernanceDelegationTokenService';\n\nexport default class TxBuilder\n  extends BaseTxBuilder\n  implements TxBuilderInterface {\n  readonly lendingPools: {\n    [market: string]: LendingPoolInterface;\n  };\n\n  readonly baseDebtTokenService: BaseDebtTokenInterface;\n\n  readonly liquiditySwapAdapterService: LiquiditySwapAdapterInterface;\n\n  readonly repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface;\n\n  public aaveGovernanceV2Service: AaveGovernanceV2Interface;\n\n  public governanceDelegationTokenService: GovernanceDelegationTokenInterface;\n\n  public wethGatewayService: WETHGatewayInterface;\n\n  constructor(\n    network: Network = Network.mainnet,\n    injectedProvider?:\n      | providers.ExternalProvider\n      | providers.Web3Provider\n      | string\n      | undefined,\n    defaultProviderKeys?: DefaultProviderKeys\n  ) {\n    super(network, injectedProvider, defaultProviderKeys);\n\n    this.lendingPools = {};\n    this.baseDebtTokenService = new BaseDebtToken(\n      this.configuration,\n      this.erc20Service\n    );\n    this.wethGatewayService = new WETHGatewayService(\n      this.configuration,\n      this.baseDebtTokenService,\n      this.erc20Service\n    );\n    this.liquiditySwapAdapterService = new LiquiditySwapAdapterService(\n      this.configuration\n    );\n    this.repayWithCollateralAdapterService = new RepayWithCollateralAdapterService(\n      this.configuration\n    );\n    this.aaveGovernanceV2Service = new AaveGovernanceV2Service(\n      this.configuration\n    );\n    this.governanceDelegationTokenService = new GovernanceDelegationTokenService(\n      this.configuration\n    );\n  }\n\n  public getLendingPool = (market: Market): LendingPoolInterface => {\n    if (!this.lendingPools[market]) {\n      this.lendingPools[market] = new LendingPool(\n        this.configuration,\n        this.erc20Service,\n        this.synthetixService,\n        this.wethGatewayService,\n        this.liquiditySwapAdapterService,\n        this.repayWithCollateralAdapterService,\n        market\n      );\n    }\n\n    return this.lendingPools[market];\n  };\n}\n"],"names":["BigNumberZD","BigNumber","clone","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","valueToBigNumber","amount","valueToZDBigNumber","bn10","bn10PowLookup","pow10","decimals","pow","normalize","n","normalizeBN","toString","dividedBy","BorrowRateMode","WAD","HALF_WAD","RAY","HALF_RAY","WAD_RAY_RATIO","rayMul","a","b","plus","multipliedBy","div","rayDiv","rayToWad","wadToRay","decimalPlaces","binomialApproximatedRayPow","p","base","exp","eq","expMinusOne","minus","expMinusTwo","gt","basePowerTwo","basePowerThree","firstTerm","secondTerm","thirdTerm","SECONDS_PER_YEAR","calculateCompoundedInterest","rate","currentTimestamp","lastUpdateTimestamp","timeDelta","RayMath","getCompoundedBalance","_principalBalance","_reserveIndex","_reserveRate","_lastUpdateTimestamp","principalBalance","cumulatedInterest","calculateLinearInterest","getReserveNormalizedIncome","index","getLinearBalance","balance","getCompoundedStableBalance","_userStableRate","calculateHealthFactorFromBalances","collateralBalanceETH","borrowBalanceETH","currentLiquidationThreshold","calculateAvailableBorrowsETH","currentLtv","availableBorrowsETH","calculateAverageRate","index0","index1","timestamp0","timestamp1","getCompoundedBorrowBalance","reserve","userReserve","principalBorrows","borrowRateMode","Variable","variableBorrowRate","variableBorrowIndex","borrowRate","totalFeesETH","lt","borrowFee","calculateCumulatedBalance","poolReserve","liquidityRate","liquidityIndex","userBalanceIndex","calculateCurrentUnderlyingBalance","principalATokenBalance","redirectedBalance","interestRedirectionAddress","computeRawUserSummaryData","poolReservesData","rawUserReserves","userId","usdPriceEth","totalLiquidityETH","totalCollateralETH","totalBorrowsETH","userReservesData","map","find","id","Error","computedUserReserve","priceInEth","price","currentUnderlyingBalance","currentUnderlyingBalanceETH","currentUnderlyingBalanceUSD","toFixed","principalBorrowsETH","principalBorrowsUSD","currentBorrows","currentBorrowsETH","currentBorrowsUSD","originationFeeETH","originationFee","originationFeeUSD","computeUserReserveData","usageAsCollateralEnabled","usageAsCollateralEnabledOnUser","baseLTVasCollateral","reserveLiquidationThreshold","sort","symbol","healthFactor","totalCollateralUSD","totalLiquidityUSD","totalBorrowsUSD","totalFeesUSD","totalBorrowsWithFeesETH","totalBorrowsWithFeesUSD","totalBorrowsAndFeesETH","maxAmountToWithdrawInEth","currentLoanToValue","reservesData","userData","reserveDecimals","reserveLiquidationBonus","reserves","reserveIndexes30DaysAgo","reserve30DaysAgo","res","_reserveIndexes30Days","paramsHistory","_reserveIndexes30Days2","avg30DaysVariableBorrowRate","timestamp","undefined","avg30DaysLiquidityRate","stableBorrowRate","totalLiquidity","availableLiquidity","totalBorrows","totalBorrowsVariable","totalBorrowsStable","amountToDeposit","amountToBorrow","borrowMode","optimalUtilisationRate","baseVariableBorrowRate","totalDeposits","utilizationRate","currentStableBorrowRate","currentVariableBorrowRate","currentLiquidityRate","excessUtilizationRateRatio","stableRateSlope1","stableRateSlope2","variableRateSlope1","variableRateSlope2","weightedVariableRate","weightedStableRate","averageStableBorrowRate","getEthAndUsdBalance","balanceInEth","balanceInUsd","rewardsInfo","underlyingBalance","scaledATokenBalance","underlyingBalanceETH","underlyingBalanceUSD","variableBorrows","scaledVariableDebt","variableBorrowsETH","variableBorrowsUSD","stableBorrows","principalStableDebt","stableBorrowLastUpdateTimestamp","stableBorrowsETH","stableBorrowsUSD","calculateSupplies","totalScaledVariableDebt","totalPrincipalStableDebt","averageStableRate","stableDebtLastUpdateTimestamp","totalStableDebt","totalVariableDebt","aTokenRewards","calculateRewards","aTokenIncentivesIndex","aTokenincentivesUserIndex","incentivePrecision","rewardTokenDecimals","aIncentivesLastUpdateTimestamp","aEmissionPerSecond","emissionEndTimestamp","rewardTokenPriceEth","aTokenRewardsETH","aTokenRewardsUSD","vTokenRewards","vTokenIncentivesIndex","vTokenincentivesUserIndex","vIncentivesLastUpdateTimestamp","vEmissionPerSecond","vTokenRewardsETH","vTokenRewardsUSD","sTokenRewards","sTokenIncentivesIndex","sTokenincentivesUserIndex","sIncentivesLastUpdateTimestamp","sEmissionPerSecond","sTokenRewardsETH","sTokenRewardsUSD","totalRewards","totalRewardsETH","totalRewardsUSD","formatUserSummaryData","calculateReserveDebt","formatReserves","totalDebt","hasEmission","Math","floor","Date","now","aIncentivesAPY","calculateIncentivesAPY","vIncentivesAPY","sIncentivesAPY","reserveFactor","calculateReserveDebtSuppliesRaw","emissionPerSecond","rewardTokenPriceInEth","tokenTotalSupplyNormalized","tokenPriceInEth","emissionPerYear","totalSupplyNormalized","principalUserBalance","reserveIndex","userIndex","precision","reserveIndexTimestamp","totalSupply","currentReserveIndex","InterestRate","Market","Network","ChainId","eEthereumTxType","ProtocolAction","GovernanceVote","Stake","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","value","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","commonContractAddressBetweenMarketsV2","kovan","SYNTHETIX_PROXY_ADDRESS","GOVERNANCE_PROTO_CONTRACT","LEND_TO_AAVE_MIGRATOR","WETH_GATEWAY","FAUCET","SWAP_COLLATERAL_ADAPTER","REPAY_WITH_COLLATERAL_ADAPTER","FLASHLIQUIDATION","INCENTIVES_CONTROLLER","INCENTIVES_CONTROLLER_REWARD_TOKEN","ropsten","mainnet","polygon","mumbai","distinctContractAddressBetweenMarketsV2","Proto","LENDINGPOOL_ADDRESS","AMM","aaveGovernanceV2Addresses","AAVE_GOVERNANCE_V2","AAVE_GOVERNANCE_V2_EXECUTOR_SHORT","AAVE_GOVERNANCE_V2_EXECUTOR_LONG","AAVE_GOVERNANCE_V2_HELPER","DEFAULT_NULL_VALUE_ON_TX","from","toHexString","DEFAULT_APPROVE_AMOUNT","constants","MaxUint256","MAX_UINT_AMOUNT","API_ETH_MOCK_ADDRESS","gasLimitRecommendations","limit","recommended","deposit","withdraw","liquidationCall","liquidationFlash","repay","borrowETH","withdrawETH","swapCollateral","repayCollateral","distinctStakingAddressesBetweenTokens","Aave","canUsePermit","TOKEN_STAKING_ADDRESS","STAKING_REWARD_TOKEN_ADDRESS","STAKING_HELPER_ADDRESS","Balancer","enabledNetworksByService","staking","lendingPool","governance","wethGateway","faucet","liquiditySwapAdapter","repayWithCollateralAdapter","aaveGovernanceV2","ltaMigrator","incentivesController","IAaveGovernanceV2__factory","connect","address","signerOrProvider","Contract","_abi","anonymous","inputs","indexed","internalType","outputs","stateMutability","components","IAaveIncentivesController__factory","IAaveStakingHelper__factory","IDebtTokenBase__factory","IERC20Detailed__factory","IFaucet__factory","IGovernancePowerDelegationToken__factory","IGovernanceStrategy__factory","IGovernanceV2Helper__factory","ILendingPool__factory","ILendToAaveMigrator__factory","IMinter__factory","IRepayWithCollateral__factory","IStakedToken__factory","IParaSwapLiquiditySwapAdapter__factory","ISynthetix__factory","IWETHGateway__factory","parseNumber","getTxValue","toLowerCase","mintAmountsPerToken","AAVE","BAT","BUSD","DAI","ENJ","KNC","LEND","LINK","MANA","MKR","REN","REP","SNX","SUSD","TUSD","UNI","USDC","USDT","WBTC","YFI","ZRX","UNIUSDC","UNIDAI","UNIUSDT","UNIDAIETH","UNIUSDCETH","UNISETHETH","UNILENDETH","UNILINKETH","UNIMKRETH","canBeEnsAddress","ensAddress","endsWith","isEthAddressMetadataKey","isEthAddressOrENSMetadataKey","isPositiveMetadataKey","isPositiveOrMinusOneMetadataKey","is0OrPositiveMetadataKey","optionalMetadataKey","IsEthAddress","field","target","propertyKey","parameterIndex","existingPossibleAddresses","Reflect","getOwnMetadata","defineMetadata","IsEthAddressOrENS","IsPositiveAmount","params","Is0OrPositiveAmount","IsPositiveOrMinusOneAmount","optionalValidator","propertyName","methodArguments","optionalParameters","isParamOptional","isEthAddressValidator","addressParameters","storedParams","utils","isAddress","isEthAddressOrEnsValidator","amountGtThan0Validator","amountParameters","Number","amount0OrPositiveValidator","amountGtThan0OrMinus1","amountMinusOneParameters","LPValidator","descriptor","currentNetwork","config","network","acceptedNetworks","market","indexOf","arguments","apply","StakingValidator","tokenStake","WETHValidator","GovValidator","GovDelegationValidator","estimateGasByNetwork","tx","gasSurplus","provider","estimateGas","estimatedGas","add","mul","getGasPrice","BaseService","contractFactory","_this","contractInstances","rawTxMethod","action","gasLimit","lte","txs","txCallback","force","gasPrice","txType","ERC20_APPROVAL","gasPriceProv","console","augustusFromAmountOffsetFromCalldata","calldata","LiquiditySwapAdapterService","liquiditySwapAdapterAddress","swapAndDeposit","user","assetToSwapFrom","assetToSwapTo","amountToSwap","minAmountToReceive","permitParams","augustus","swapCallData","swapAll","liquiditySwapContract","getContractInstance","generateTxCallback","populateTransaction","DLP_ACTION","gas","generateTxPriceEstimation","__decorate","__param","buildParaSwapLiquiditySwapParams","swapAllBalanceOffset","swapCalldata","permitAmount","deadline","v","r","s","defaultAbiCoder","encode","LendingPool","erc20Service","synthetixService","wethGatewayService","liquiditySwapAdapterService","repayWithCollateralAdapterService","lendingPoolAddress","onBehalfOf","referralCode","depositETH","isApproved","approve","decimalsOf","convertedAmount","synthetixValidation","approveTx","lendingPoolContract","aTokenAddress","borrow","interestRateMode","debtTokenAddress","formatAmount","numericRateMode","repayETH","swapBorrowRateMode","setUsageAsCollateral","usageAsCollateral","setUserUseReserveAsCollateral","liquidator","liquidatedUser","debtReserve","collateralReserve","purchaseAmount","getAToken","liquidateAll","getTokenData","all","flash","fromAsset","fromAToken","toAsset","fromAmount","minToAmount","permitSignature","tokenDecimals","amountSlippageConverted","amountWithSurplus","convertedAmountWithSurplus","flashLoan","repayWithCollateral","assetToRepay","repayWithAmount","repayAmount","repayAllDebt","rateMode","useEthPath","convertedRepayWithAmount","repayAmountWithSurplus","convertedRepayAmount","numericInterestRate","Stable","swapAndRepayTx","swapAndRepay","collateralAsset","debtAsset","collateralAmount","debtRepayAmount","debtRateMode","permit","flashLiquidation","borrowedAsset","debtTokenCover","initiator","addSurplus","convertedDebt","convertedDebtTokenCover","flashBorrowAmount","ERC20Service","token","spender","erc20Contract","userAddress","allowance","amountBNWithDecimals","gte","nameGetter","symbolGetter","decimalsGetter","FaucetService","faucetAddress","faucetContract","mint","tokenSymbol","_this2","FAUCET_MINT","getMinter","minterContract","isEthRequired","LTAMigratorService","migratorAddress","migrateLendToAave","migratorContract","lendToken","migrateFromLEND","MIGRATION_LEND_AAVE","StakingService","stakingContractAddress","stakingRewardTokenContractAddress","stakingHelperContractAddress","stakingHelperContract","signStaking","nonce","stakingContract","STAKED_TOKEN","stakedToken","typeData","types","EIP712Domain","Permit","primaryType","domain","version","chainId","verifyingContract","message","owner","JSON","stringify","stakeWithPermit","signature","sig","splitSignature","stake","STAKE_ACTION","redeem","cooldown","claimRewards","REWARD_TOKEN","existingOptionalParameters","SynthetixService","synthAddress","toUpperCase","isSnxTransferable","synthContract","transferableSynthetix","transferableAmount","IncentivesController","addresses","incentivesControllerAddress","incentivesControllerRewardTokenAddress","assets","to","incentivesContract","REWARD_ACTION","BaseTxBuilder","injectedProvider","defaultProviderKeys","stakeToken","stakings","configuration","providers","JsonRpcProvider","Web3Provider","ethers","getDefaultProvider","log","ltaMigratorService","faucetService","incentiveService","WETHGatewayService","baseDebtTokenService","wethGatewayAddress","wethGatewayContract","isDelegationApproved","approveDelegationTx","approveDelegation","ExecutorType","ProposalState","BaseDebtToken","delegatee","debtTokenContract","allowanceGiver","allowanceReceiver","borrowAllowance","delegatedAllowance","RepayWithCollateralAdapterService","repayWithCollateralAddress","repayWithCollateralContract","getLink","hash","ipfsEndpoint","MEMORIZE","getProposalMetadata","ipfsHash","base58","Buffer","axios","get","timeout","data","title","description","shortDescription","_context","parseProposal","rawProposal","creator","executor","targets","signatures","calldatas","withDelegatecalls","startBlock","endBlock","executionTime","forVotes","againstVotes","executed","canceled","strategy","ipfsHex","totalVotingSupply","minimumQuorum","minimumDiff","executionTimeWithGracePeriod","proposalCreated","proposalState","proposalMetadata","proposal","AaveGovernanceV2Service","aaveGovernanceV2Address","aaveGovernanceV2HelperAddress","executors","Short","Long","withDelegateCalls","govContract","GOVERNANCE_ACTION","cancel","proposalId","queue","execute","submitVote","support","signVoting","VoteEmitted","submitVoteBySignature","getProposals","skip","helper","proposals","getProposal","getPropositionPowerAt","block","proposalStrategy","formatEther","getVotingPowerAt","getTotalPropositionSupplyAt","getTotalVotingSupplyAt","getTokensPower","tokens","power","getVoteOnProposal","GovernanceDelegationTokenService","_BaseService","governanceDelegationToken","governanceToken","getDelegateeAddress","delegateeAddress","GOV_DELEGATION_ACTION","delegateByType","delegationType","delegateBySig","expiry","getNonce","delegateByTypeBySig","prepareDelegateSignature","governanceTokenName","Delegate","prepareDelegateByTypeSignature","DelegateByType","getDelegateeByType","delegator","getPowerCurrent","getPowerAtBlock","blockNumber","_nonces","resolveName","TxBuilder","lendingPools","aaveGovernanceV2Service","governanceDelegationTokenService","x","z","modulo"],"mappings":"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,UACd3G,KAAM,GACNzD,KAAM,YAGVsK,gBAAiB,OACjBtK,KAAM,aCxHG+K,GAAb,kCACSnB,QAAP,SACEC,EACAC,UAEO,IAAIC,WAASF,EAASG,GAAMF,MALvC,GASME,GAAO,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACd3G,KAAM,KACNzD,KAAM,WAER,CACEoK,aAAc,6BACd3G,KAAM,aACNzD,KAAM,YAGVyD,KAAM,cACN4G,QAAS,CACP,CACEE,WAAY,CACV,CACEH,aAAc,UACd3G,KAAM,oBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,gBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,cACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,+BACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,kBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,KACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,UACNzD,KAAM,WAER,CACEoK,aAAc,iCACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,YACd3G,KAAM,UACNzD,KAAM,aAER,CACEoK,aAAc,YACd3G,KAAM,SACNzD,KAAM,aAER,CACEoK,aAAc,WACd3G,KAAM,aACNzD,KAAM,YAER,CACEoK,aAAc,UACd3G,KAAM,YACNzD,KAAM,WAER,CACEoK,aAAc,SACd3G,KAAM,oBACNzD,KAAM,UAER,CACEoK,aAAc,UACd3G,KAAM,aACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,gBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,eACNzD,KAAM,WAER,CACEoK,aAAc,OACd3G,KAAM,WACNzD,KAAM,QAER,CACEoK,aAAc,OACd3G,KAAM,WACNzD,KAAM,QAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,uCACd3G,KAAM,gBACNzD,KAAM,UAGVoK,aAAc,2CACd3G,KAAM,gBACNzD,KAAM,UAGVsK,gBAAiB,OACjBtK,KAAM,YAER,CACEkK,OAAQ,CACN,CACEE,aAAc,UACd3G,KAAM,OACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,QACNzD,KAAM,WAER,CACEoK,aAAc,6BACd3G,KAAM,aACNzD,KAAM,YAGVyD,KAAM,eACN4G,QAAS,CACP,CACEE,WAAY,CACV,CACEH,aAAc,UACd3G,KAAM,oBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,gBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,cACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,+BACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,kBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,KACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,UACNzD,KAAM,WAER,CACEoK,aAAc,iCACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,YACd3G,KAAM,UACNzD,KAAM,aAER,CACEoK,aAAc,YACd3G,KAAM,SACNzD,KAAM,aAER,CACEoK,aAAc,WACd3G,KAAM,aACNzD,KAAM,YAER,CACEoK,aAAc,UACd3G,KAAM,YACNzD,KAAM,WAER,CACEoK,aAAc,SACd3G,KAAM,oBACNzD,KAAM,UAER,CACEoK,aAAc,UACd3G,KAAM,aACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,gBACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,eACNzD,KAAM,WAER,CACEoK,aAAc,OACd3G,KAAM,WACNzD,KAAM,QAER,CACEoK,aAAc,OACd3G,KAAM,WACNzD,KAAM,QAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,UACd3G,KAAM,WACNzD,KAAM,WAER,CACEoK,aAAc,uCACd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"}